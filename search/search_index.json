{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>The paradigm of schema-driven API approaches is gaining increasing popularity as it facilitates programmatic interaction with systems by both machines and humans. While OpenAPI schema stands out as a widely embraced system, there are other notable schema approaches like YANG, among others. This project endeavors to empower users with a declarative and idempotent method for seamless interaction with API systems, providing a robust foundation for effective system configuration.\"</p>"},{"location":"#architecture","title":"Architecture","text":"<p>The project consists of 4 components:</p> <p></p>"},{"location":"#schema-server","title":"Schema-server","text":"<p>The schema server component is a versatile repository for schemas from diverse vendors and versions. It features a GRPC API for seamless schema querying and dynamic management, allowing users to load and unload schemas in real time. The integration of a CLI enhances user interaction, providing a familiar command-line interface. Operating in a stateless architecture, it offers scalability, while optional schema persistence caters to users requiring persistent storage. In essence, the schema server combines flexibility, efficiency, and user-friendliness for effective schema management in dynamic API environments.</p>"},{"location":"#data-server","title":"Data-server","text":"<p>The data-server component serves as a versatile intermediary, connecting the config-server, schema-server, cache, and xNF/Device in a stateless design for scalability. It features a North-bound API for both imperative and declarative interactions and supports various South-bound protocols. With dedicated DataStores per target, flexible synchronization options, candidate-based interactions, and the ability to connect multiple data servers per device, it provides a resilient and adaptable foundation for managing and synchronizing data in dynamic system environments.</p>"},{"location":"#cache","title":"Cache","text":"<p>The cache component manages multiple datastores, including Config, State, and Intended, along with Intent metadata. It offers the option for persistent data storage, complemented by a GRPC API for seamless interaction. Additionally, the cache component provides a derived Command Line Interface (CLI) for user-friendly access and configuration.</p>"},{"location":"#config-server","title":"Config-server","text":"<p>The config-server is a Kubernetes-based Operator and comprises of several controllers:</p> <ul> <li>Schema Controller: Manages the lifecycle of schemas using Schema Custom Resources (CR).</li> <li>Discovery Controller: Manages the lifecycle of targets through DiscoveryRule CR, discovering devices/NF(s)</li> <li>Target Controller: Manages the lifecycle of Target DataStores using Target CR.</li> <li>Config API Server: Manages the lifecycle of Config resources.<ul> <li>Utilizes its storage backend (not etcd).</li> <li>Interacts declaratively with the data-server through Intent transactions.</li> <li>Implements validation checks, rejecting configurations that fail validation.</li> </ul> </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Schema's: YANG, others TBD</li> <li>Targets: Physical devices (<code>PNF</code>), Containers (<code>CNF</code>), Virtual Machines (<code>VNF</code>) and <code>NOOP</code> (No Operation)</li> <li>Vendor agnostic</li> <li>Flexible deployments: Small, medium or large scale scaled out deployments</li> <li>Target Protocols: gNMI, Netconf</li> <li>Full Config or Config Snippets</li> <li>Declarative Operation</li> <li>Deviations (revertive/non revertive)</li> <li>Config Blame</li> </ul>"},{"location":"#presentations","title":"Presentations","text":"<p>Presentations about SDCIO:</p> <ul> <li>ONE Summit 2024: Cloud Native YANG Mgmt - Wim Henderickx, Nokia, video</li> </ul>"},{"location":"#join-us","title":"Join us","text":"<p>Have questions, ideas, bug reports or just want to chat? Come join our discord server.</p>"},{"location":"community/community/","title":"Community","text":"<p>Find out everything about the SDCIO community.</p>"},{"location":"community/community/#discord","title":"Discord","text":"<p>Everybody is welcome to join and chat with our community members about all things SDCIO! </p>"},{"location":"community/community/#logos","title":"Logos","text":"<p>Logos of SDCIO in different formats:</p> <ul> <li>SDC_transparent 100x100.png</li> <li>SDC_transparent 511x511.png</li> <li>SDC_transparent.png</li> <li>SDC_transparent 511x680.png</li> <li>SDC_logo.svg</li> </ul>"},{"location":"dev/1_about/","title":"About","text":"<p>This developed guide has been crafted to assist you as a developer to extend/debug/enhance the schema driven configuration tool.</p>"},{"location":"dev/2_local/","title":"Development","text":""},{"location":"dev/2_local/#environment","title":"Environment","text":"<p>The following provides details on how to run any of the SDC components locally on the developers machine, allowing to use e.g. the debugging mode.</p>"},{"location":"dev/2_local/#setup","title":"Setup","text":"<p>Telepresence is used to \"hijack\" the TCP connection endpoints and redirect it to the development machine. Hence, install Telepresence on the development machine.</p>"},{"location":"dev/2_local/#install-telepresence-on-dev-machine","title":"Install Telepresence on Dev machine","text":"<pre><code>sudo curl -fL https://github.com/telepresenceio/telepresence/releases/latest/download/telepresence-linux-amd64 -o /usr/local/bin/telepresence\n\nsudo chmod a+x /usr/local/bin/telepresence\nsudo bash -c \"/usr/local/bin/telepresence completion bash &gt; /etc/bash_completion.d/telepresence\"\n. /etc/bash_completion.d/telepresence\n</code></pre>"},{"location":"dev/2_local/#install-telepresence-in-k8s-cluster","title":"Install Telepresence in K8s cluster","text":"<pre><code>telepresence helm install\ntelepresence helm upgrade --set client.routing.allowConflictingSubnets=\"{10.0.0.0/8}\"\n</code></pre>"},{"location":"dev/2_local/#connect","title":"Connect","text":"<p>Connect to the telepresence service in the cluster, using the namespace network-system. <pre><code>telepresence connect -n network-system\n</code></pre></p>"},{"location":"dev/2_local/#intercept-service-traffic","title":"Intercept Service Traffic","text":""},{"location":"dev/2_local/#config-server","title":"Config Server","text":"<pre><code>telepresence replace config-server --container config-server\n</code></pre> mounts <p>telepresence allows for the mounts of the config-server pod to be forwarded via sshfs to the dev machine.</p> <p>It might be necessary to set the <code>user_allow_other</code> in the fuse config file <code>/etc/fuse.conf</code>.</p>"},{"location":"dev/2_local/#data-server","title":"Data Server","text":"<pre><code>telepresence replace config-server --container data-server\n</code></pre> iptables error <p>Telepresence allows also to intercept only traffic, without adding an init-container. To do that, it is necessary to have named ports, not only numbered ones. Therefore, adding a name to the data-server ports and adding the same name to the data-service will resolve the problem.</p>"},{"location":"dev/2_local/#retrieve-config-server-api-service-certificate","title":"Retrieve Config-Server Api-Service Certificate","text":"<pre><code>kubectl get secrets -n network-system config-server-cert -o jsonpath=\"{.data['tls\\.crt']}\" | base64 -d | tee tls.crt\nkubectl get secrets -n network-system config-server-cert -o jsonpath=\"{.data['tls\\.key']}\" | base64 -d | tee tls.key\n</code></pre>"},{"location":"dev/2_local/#prepare-kubeconfig","title":"Prepare kubeconfig","text":"<pre><code># copy actual ~/.kube/config\ncp ~/.kube/config ./kubeconfig\n\n# delete the users section via yq\nyq -i 'del(.users)' kubeconfig\n</code></pre>"},{"location":"dev/2_local/#retrieve-serviceaccount-token","title":"Retrieve ServiceAccount Token","text":"<p>Retrieve a 30-day valid ServiceAccount token and put it into the kubeconfig. <pre><code>kubectl config --kubeconfig ./kubeconfig set-credentials kind-kind --token=$(kubectl create token -n network-system --duration 720h config-server)\n</code></pre></p>"},{"location":"dev/2_local/#run-config-server-locally","title":"Run config-server locally","text":"<p>The VS Code configuration is as follows.  The Data-Server has to be started first, then the Config-Server can be started. <pre><code>        {\n            \"name\": \"Launch Package\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${workspaceFolder}/main.go\",\n            \"cwd\": \"${workspaceFolder}\",\n            \"args\": [\n                \"--tls-cert-file=./tls.crt\",\n                \"--tls-private-key-file=./tls.key\",\n                \"--audit-log-path=-\",\n                \"--audit-log-maxage=0\",\n                \"--audit-log-maxbackup=0\",\n                \"--secure-port=6443\",\n                \"--kubeconfig=./kubeconfig\",\n                \"--authorization-kubeconfig=./kubeconfig\",\n                \"--authentication-kubeconfig=./kubeconfig\",\n            ],\n            \"env\": {\n                \"SDC_SCHEMA_SERVER_BASE_DIR\": \"/tmp/SDC/SchemaBase\",\n                \"SDC_CONFIG_DIR\": \"/tmp/SDC/Config\",\n                \"SDC_WORKSPACE_DIR\": \"/tmp/SDC/Workspace\",\n                \"PPROF_PORT\": \"8081\",\n                \"REVERTIVE\": \"true\",\n                \"ENABLE_SUBSCRIPTION\": \"true\",\n                \"ENABLE_TARGET\": \"true\",\n                \"ENABLE_TARGETDATASTORE\": \"true\",\n                \"ENABLE_TARGETCONFIGSERVER\": \"true\",\n                \"ENABLE_TARGETRECOVERYSERVER\": \"true\",\n                \"ENABLE_DISCOVERYRULE\": \"true\",\n                \"ENABLE_SCHEMA\": \"true\",\n                \"ENABLE_CONFIGSET\": \"true\",\n                \"ENABLE_WORKSPACE\": \"true\",\n                \"ENABLE_ROLLOUT\": \"true\"\n            },\n            \"console\": \"integratedTerminal\",\n        }\n</code></pre></p>"},{"location":"dev/3_pprof/","title":"pprof","text":""},{"location":"dev/3_pprof/#introduction","title":"Introduction","text":"<p><code>pprof</code> is a powerful profiling tool for Go applications that helps analyze CPU usage, memory allocation, and other performance characteristics. This guide explains how to collect and analyze profiling data from a running Go service using <code>pprof</code>.</p>"},{"location":"dev/3_pprof/#enabling-pprof","title":"Enabling pprof","text":"<p><code>pprof</code> is enabled using the following arguments in the config-server</p> <pre><code>- name: PPROF_PORT\nvalue: \"8081\"\n</code></pre>"},{"location":"dev/3_pprof/#setting-up-pprof","title":"Setting Up pprof","text":""},{"location":"dev/3_pprof/#1-forwarding-the-pprof-port","title":"1. Forwarding the pprof Port","text":"<p>To access the pprof endpoint of a running pod in a Kubernetes cluster, use the following command to set up port forwarding:</p> <pre><code>kubectl port-forward pod/&lt;pod&gt; -n network-system 8081:8081\n</code></pre> <p>Replace <code>&lt;pod&gt;</code> with the actual pod name running your Go application.</p>"},{"location":"dev/3_pprof/#2-collecting-profiles","title":"2. Collecting Profiles","text":""},{"location":"dev/3_pprof/#cpu-profile","title":"CPU Profile","text":"<p>To collect a CPU profile, execute:</p> <pre><code>curl -s \"http://127.0.0.1:8081/debug/pprof/profile\" &gt; test/cpu-profile.out\n</code></pre> <p>This records CPU usage for 30 seconds and saves the profile in <code>test/cpu-profile.out</code>.</p>"},{"location":"dev/3_pprof/#heap-profile","title":"Heap Profile","text":"<p>To capture a heap profile, run:</p> <pre><code>curl -s \"http://127.0.0.1:8081/debug/pprof/heap\" &gt; test/heap-profile.out\n</code></pre> <p>This saves the heap allocation profile in <code>test/heap-profile.out</code>.</p>"},{"location":"dev/3_pprof/#analyzing-the-profiles","title":"Analyzing the Profiles","text":""},{"location":"dev/3_pprof/#1-analyzing-the-cpu-profile","title":"1. Analyzing the CPU Profile","text":"<p>To visualize the CPU profile in an interactive web interface:</p> <pre><code>go tool pprof -http=:8080 test/cpu-profile.out\n</code></pre> <p>This opens a web-based interface showing the CPU usage breakdown.</p>"},{"location":"dev/3_pprof/#2-analyzing-the-heap-profile","title":"2. Analyzing the Heap Profile","text":"<p>To view a summary of memory allocation:</p> <pre><code>go tool pprof -top test/heap-profile.out\n</code></pre> <p>To open the heap profile in a web interface:</p> <pre><code>go tool pprof -http=:8080 test/heap-profile.out\n</code></pre>"},{"location":"dev/3_pprof/#3-live-heap-profiling","title":"3. Live Heap Profiling","text":"<p>Instead of saving the heap profile first, you can analyze it directly from the running service:</p> <pre><code>go tool pprof http://127.0.0.1:8081/debug/pprof/heap\n</code></pre> <p>This fetches the heap profile and starts an interactive session where you can run commands like <code>top</code>, <code>list &lt;function&gt;</code>, and <code>web</code> to inspect memory allocation.</p>"},{"location":"dev/3_pprof/#conclusion","title":"Conclusion","text":"<p>By leveraging <code>pprof</code>, you can effectively diagnose performance bottlenecks in Go applications running in Kubernetes. The combination of CPU and heap profiling provides deep insights into resource consumption, helping optimize application performance.</p>"},{"location":"examples/0_about/","title":"About lab examples","text":"<p>Note</p> <p>The lab examples that you find on this site are meant to explain the basics of using <code>sdc</code>. </p> <p>These lab examples are meant to be used as-is or as a base layer to a more customized or elaborated lab scenarios. </p>"},{"location":"examples/1_k8s_srl_collocated/","title":"K8s with gNMI devices (SR Linux)","text":""},{"location":"examples/1_k8s_srl_collocated/#pre-requisites","title":"Pre-requisites","text":"<p>Ensure the pre-requisites are met</p>"},{"location":"examples/1_k8s_srl_collocated/#install-containerlab","title":"Install containerlab","text":"<p>SDC will need to interact with a device that talks <code>YANG</code>. You can use physical, virtual or containers. In this example we use containerlab a tool to ease deploying labs with container images.</p>"},{"location":"examples/1_k8s_srl_collocated/#sdc-on-kubernetes","title":"SDC on kubernetes","text":"<p>Install the k8s-collocated environment using a kind cluster </p>"},{"location":"examples/1_k8s_srl_collocated/#devices","title":"Devices","text":"<p>Once the sdc components are up and running, you can proceed to deploy devices, configuring them using YANG schemas. To do this we deploy containerlab using a simple topology as shown below. </p> <p>Container connectivity</p> <p>Ensure the network and kind cluster containers can communicate. In this example this is accomplished by configuring containerlab to use the kind docker bridge for its management network <code>mgmt.network: kind</code>.</p> <pre><code>name: srl-lab\nmgmt:\nmtu: 1500\nnetwork: kind\ntopology:\nkinds:\nsrl:\ntype: ixrd3\nimage: ghcr.io/nokia/srlinux:24.10.1-492\nnodes:\ndev1:\nkind: srl\ndev2:\nkind: srl\nlinks:\n</code></pre> <p>Record the IP addresses containerlab provided to both containers. You will need them in the target discovery step.</p>"},{"location":"examples/1_k8s_srl_collocated/#schemas","title":"Schema's","text":"<p>Once the devices/targets are up and running you need to install the corresponding device schema's. In this example we use Nokia SR Linux version 24.10.1</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: srl.nokia.sdcio.dev-24.10.1\nnamespace: default\nspec:\nprovider: srl.nokia.sdcio.dev\nversion: 24.10.1\nrepositories:\n- repoURL: https://github.com/nokia/srlinux-yang-models\nkind: tag\nref: v24.10.1\ndirs:\n- src: srlinux-yang-models\ndst: .\nschema:\nmodels:\n- srl_nokia/models\nincludes:\n- ietf\n- openconfig/extensions\n- openconfig/openconfig-extensions.yang\nexcludes:\n- .*tools.*\n- repoURL: https://github.com/sdcio/srlinux-yang-patch\nkind: branch\nref: v24.10\ndirs:\n- src: srl_nokia\ndst: deviations\nschema:\nmodels:\n- deviations\nEOF\n</code></pre> <p>You can validate the schema loading using the following command.</p> <pre><code>kubectl get schema srl.nokia.sdcio.dev-24.10.1\n</code></pre> <p>If successful you should see the <code>READY</code> state being <code>True</code></p> <pre><code>NAME                          READY   PROVIDER              VERSION   URL                                            REF\nsrl.nokia.sdcio.dev-24.10.1   True    srl.nokia.sdcio.dev   24.10.1   https://github.com/nokia/srlinux-yang-models   v24.10.1\n</code></pre>"},{"location":"examples/1_k8s_srl_collocated/#discovering-targets","title":"Discovering targets","text":"<p>To discover a device/target, you first need to deploy some profiles which informs the discovery controller how to authenticate to the target and which sync and connectivity profiles to use.</p> <ul> <li>Secret: used to authenticate the system.</li> </ul> <p>Ensure you update the username and password for your environment</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Secret\nmetadata:\nname: srl.nokia.sdcio.dev namespace: default\ntype: kubernetes.io/basic-auth\nstringData:\nusername: ######\npassword: ######\nEOF\n</code></pre> <ul> <li>TargetConnectionProfile: provides the connectivity information, which protocol and port to use towards the device</li> </ul> <p>In this example we use <code>gnmi</code> with port <code>57400</code> and skip-verify because we use self-signed certificates</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetConnectionProfile\nmetadata:\nname: gnmi-skipverify\nnamespace: default\nspec:\nport: 57400\nprotocol: gnmi\nencoding: JSON_IETF\nskipVerify: true\ninsecure: false\nEOF\n</code></pre> <ul> <li>TargetSyncProfile: provides the sync information we use to sync the config from the device.</li> </ul> <p>In this example we use <code>gnmi</code> using an ON-CHANGE subscription.</p> <p><pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: gnmi-get\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: gnmi\nport: 57400\npaths:\n- /\nmode: get\nencoding: JSON_IETF\ninterval: 10s\nEOF\n</code></pre> Once profiles are up installed, you can now deploy a <code>DiscoveryRule</code>. In this example we use static IP discovery (or better no discovery). It means the <code>ip address/prefix</code> containerlab returned should be used as the IP prefix in the following CRD.</p> <p>The default schema should match the schema you loaded in the schema section.</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-static\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\ndefaultSchema:\nprovider: srl.nokia.sdcio.dev  version: 24.10.1\naddresses:\n- address: 172.20.20.3\nhostName: dev1\n- address: 172.20.20.2\nhostName: dev2\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-get\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\nEOF\n</code></pre> <p>The discovery of the target can be observed using the following command</p> <pre><code>kubectl get targets.inv.sdcio.dev\n</code></pre> <p>When target are successfully discovered you should see both <code>READY</code> and <code>DATASTORE</code> set to <code>True</code>.</p> <pre><code>NAME   READY   REASON   PROVIDER              ADDRESS             PLATFORM   SERIALNUMBER   MACADDRESS\ndev1   True             srl.nokia.sdcio.dev   172.20.20.3\ndev2   True             srl.nokia.sdcio.dev   172.20.20.2\n</code></pre>"},{"location":"examples/1_k8s_srl_collocated/#configure-intents","title":"Configure Intents","text":"<p>Now that targets are ready to be consumed we can provision the targets with configuration data in a declarative way.</p> <p>The following parameters are important - metadata.name: name of the intent - metadata.labels: config.sdcio.dev/targetName and config.sdcio.dev/targetNamespace tell the config-server which device this configuration applies to - priority: defines the priority of the intent if overlapping intents apply to the target - Config has a:   - path: relative to the root   - value: the config you apply to the device in <code>yaml</code> format</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: config.sdcio.dev/v1alpha1\nkind: Config\nmetadata:\nname: intent1\nnamespace: default\nlabels:\nconfig.sdcio.dev/targetName: dev1\nconfig.sdcio.dev/targetNamespace: default\nspec:\npriority: 10\nconfig:\n- path: /\nvalue:\ninterface:\n- name: ethernet-1/1\nadmin-state: \"enable\"\ndescription: \"intent1\"\nvlan-tagging: true\nsubinterface:\n- index: 2\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 2\n- index: 3\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 3\n- index: 4\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 4\nEOF\n</code></pre>"},{"location":"examples/2_k8s_sros_collocated/","title":"K8s with NETCONF devices (SROS)","text":""},{"location":"examples/2_k8s_sros_collocated/#pre-requisites","title":"Pre-requisites","text":"<p>Ensure the pre-requisites are met</p>"},{"location":"examples/2_k8s_sros_collocated/#install-containerlab","title":"Install containerlab","text":"<p>SDC will need to interact with a device that talks <code>YANG</code>. You can use physical, virtual or containers. In this example we use containerlab a tool to ease deploying labs with container images.</p>"},{"location":"examples/2_k8s_sros_collocated/#sdc-on-kubernetes","title":"SDC on Kubernetes","text":"<p>Install the k8s-collocated environment using a kind cluster </p>"},{"location":"examples/2_k8s_sros_collocated/#devices","title":"Devices","text":"<p>Once the sdc components are up and running, you can proceed to deploy devices, configuring them using YANG schemas. To do this we deploy containerlab using a simple topology as shown below. </p> <p>Container connectivity</p> <p>Ensure the network and kind cluster containers can communicate. In this example this is accomplished by configuring containerlab to use the kind docker bridge for its management network <code>mgmt.network: kind</code>.</p> <pre><code>name: sros-lab\nmgmt:\nmtu: 1500\nnetwork: kind\ntopology:\nkinds:\nvr-sros:\nimage: registry.srlinux.dev/pub/vr-sros:24.10.R1\nlicense: license-sros24.txt\nnodes:\ndev1:\nkind: vr-sros\nmgmt-ipv4: 172.20.20.11\nmgmt-ipv6: 3fff:172:20:20::11\ndev2:\nkind: vr-sros\nmgmt-ipv4: 172.20.20.12\nmgmt-ipv6: 3fff:172:20:20::12\n</code></pre> <p>Record the IP addresses containerlab provided to both containers. You will need them in the target discovery step.</p>"},{"location":"examples/2_k8s_sros_collocated/#schemas","title":"Schema's","text":"<p>Once the devices/targets are up and running you need to install the corresponding device schema's. In this example we use Nokia SR OS version 24.10.R1</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: sros.nokia.sdcio.dev-24.10.1\nnamespace: default\nspec:\nprovider: sros.nokia.sdcio.dev\nversion: B-24.10.R1\nrepositories:\n- repoURL: https://github.com/nokia/7x50_YangModels\nkind: tag\nref: sros_24.10.r1\ndirs:\n- src: YANG\ndst: .\nschema:\nmodels:\n- nokia-combined\nincludes:\n- ietf\n- nokia-sros-yang-extensions.yang\nexcludes: []\nEOF\n</code></pre> <p>You can validate the schema loading using the following command.</p> <pre><code>kubectl get schema sros.nokia.sdcio.dev-24.10.1\n</code></pre> <p>If successful you should see the <code>READY</code> state being <code>True</code></p> <pre><code>NAME                           READY   PROVIDER               VERSION      URL                                        REF\nsros.nokia.sdcio.dev-24.10.1   True    sros.nokia.sdcio.dev   B-24.10.R1   https://github.com/nokia/7x50_YangModels   sros_24.10.r1\n</code></pre>"},{"location":"examples/2_k8s_sros_collocated/#discovering-targets","title":"Discovering targets","text":"<p>To discover a device/target, you first need to deploy some profiles which informs the discovery controller how to authenticate to the target and which sync and connectivity profiles to use.</p> <ul> <li>Secret: used to authenticate the system.</li> </ul> <p>Ensure you update the username and password for your environment</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Secret\nmetadata:\nname: sros.nokia.sdcio.dev namespace: default\ntype: kubernetes.io/basic-auth\nstringData:\nusername: ######\npassword: ######\nEOF\n</code></pre> <ul> <li>TargetConnectionProfile: provides the connectivity information, which protocol and port to use towards the device</li> </ul> <p>In this example we use <code>netconf</code> with port <code>830</code> and skip-verify because we use self-signed certificates</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetConnectionProfile\nmetadata:\nname: netconf\nnamespace: default\nlabels:\ndummy: dummy\nspec:\nport: 830\nprotocol: netconf\nencoding: UNKNOWN\nskipVerify: true\nincludeNS: true\noperationWithNS: true\nEOF\n</code></pre> <ul> <li>TargetSyncProfile: provides the sync information we use to sync the config from the device.</li> </ul> <p>In this example we use <code>netconf</code> using a PERIOD retrieval.</p> <p><pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: netconf-getconfig\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: netconf\nport: 830\npaths:\n- /\nmode: get\nencoding: CONFIG\ninterval: 30s\nEOF\n</code></pre> Once profiles are up installed, you can now deploy a <code>DiscoveryRule</code>. In this example we use static IP discovery (or better no discovery). It means the <code>ip address/prefix</code> containerlab returned should be used as the IP prefix in the following CRD.</p> <p>The default schema should match the schema you loaded in the schema section.</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-static\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\ndefaultSchema:\nprovider: sros.nokia.sdcio.dev  version: B-24.10.R1\naddresses:\n- address: 172.20.20.11\nhostName: dev1\n- address: 172.20.20.12\nhostName: dev2\ntargetConnectionProfiles:\n- credentials: sros.nokia.sdcio.dev\nconnectionProfile: netconf\nsyncProfile: netconf-getconfig\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\nEOF\n</code></pre> <p>The discovery of the target can be observed using the following command</p> <pre><code>kubectl get targets.inv.sdcio.dev\n</code></pre> <p>When target are successfully discovered you should see both <code>READY</code> and <code>DATASTORE</code> set to <code>True</code>.</p> <pre><code>NAME   READY   REASON   PROVIDER               ADDRESS             PLATFORM   SERIALNUMBER   MACADDRESS\ndev1   True             sros.nokia.sdcio.dev   172.20.20.11\ndev2   True             sros.nokia.sdcio.dev   172.20.20.12\n</code></pre>"},{"location":"examples/2_k8s_sros_collocated/#configure-intents","title":"Configure Intents","text":"<p>Now that targets are ready to be consumed we can provision the targets with configuration data in a declarative way.</p> <p>The following parameters are important - metadata.name: name of the intent - metadata.labels: config.sdcio.dev/targetName and config.sdcio.dev/targetNamespace tell the config-server which device this configuration applies to - priority: defines the priority of the intent if overlapping intents apply to the target - Config has a:   - path: relative to the root   - value: the config you apply to the device in <code>yaml</code> format</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: config.sdcio.dev/v1alpha1\nkind: Config\nmetadata:\nname: intent1-sros\nnamespace: default\nlabels:\nconfig.sdcio.dev/targetName: dev1\nconfig.sdcio.dev/targetNamespace: default\nspec:\npriority: 10\nconfig:\n- path: /\nvalue:\nconfigure:\nservice:\nvprn:\nservice-name: \"vprn123\"\ncustomer: \"1\"\nservice-id: \"200\"\nadmin-state: \"enable\"\nEOF\n</code></pre>"},{"location":"getting-started/basic-usage/","title":"Basic Usage","text":"<p>The following examples demonstrate the basic usage of SDCIO in a scenario where a Nokia SR Linux node is being configured via SDCIO installed in a Kind based Kubernetes cluster.</p>"},{"location":"getting-started/basic-usage/#prerequisites","title":"Prerequisites","text":"<p>Please ensure that Docker is installed and running on your system. An installation guide can be found in the Install Docker Engine page. Also ensure post-installation steps are followed, so that the current user can run docker commands without sudo.</p> <p>Furthermore, the following tools are required to be installed on your system:  - jq - a lightweight and flexible command-line JSON processor.</p>"},{"location":"getting-started/basic-usage/#kind","title":"Kind","text":"<p>kind is a tool for running local Kubernetes clusters using Docker container \u201cnodes\u201d. <code>kind</code> was primarily designed for testing Kubernetes itself, but may be used for local development or CI.</p>"},{"location":"getting-started/basic-usage/#installation","title":"Installation","text":"<pre><code>[ $(uname -m) = x86_64 ] &amp;&amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.29.0/kind-linux-amd64\nchmod +x ./kind\nsudo mv ./kind /usr/local/bin/kind\n</code></pre>"},{"location":"getting-started/basic-usage/#enable-kind-auto-completion-optional","title":"Enable kind auto-completion (optional)","text":"<p>To enable auto-completion for <code>kind</code>, run the following command. <pre><code>sudo bash -c \"kind completion bash &gt; /etc/bash_completion.d/kind\"\n. /etc/bash_completion.d/kind\n</code></pre></p>"},{"location":"getting-started/basic-usage/#cluster-creation","title":"Cluster Creation","text":"<p>To create a kind-based Kubernetes Cluster, issue the following command. <pre><code>kind create cluster\n# Allow the kind cluster to communicate with the later created containerlab topology\nsudo iptables -I DOCKER-USER -o br-$(docker network inspect -f '{{ printf \"%.12s\" .ID }}' kind) -j ACCEPT\n</code></pre></p> iptables command description <pre><code>sudo iptables -I DOCKER-USER -o br-$(docker network inspect -f '{{ printf \"%.12s\" .ID }}' kind) -j ACCEPT\n</code></pre> <ul> <li><code>docker network inspect -f '{{ printf \"%.12s\" .ID }}' kind</code> - inspects the kind docker network, that the kind cluster is attached to. Extract from the json that is returned, the first 12 characters of the Id field.</li> <li><code>sudo iptables -I DOCKER-USER -o br-$(...) -j ACCEPT</code> - as root insert a firewall rule to the DOCKER-USER chain, concerning the bridge with the name \"br-\" with the action ACCEPT."},{"location":"getting-started/basic-usage/#kubectl","title":"kubectl","text":"<p><code>kubectl</code> is a command-line tool used to control and manage Kubernetes clusters. It allows developers and administrators to execute commands to create, monitor, and manage resources such as pods, services, deployments, and more within a Kubernetes cluster.</p>"},{"location":"getting-started/basic-usage/#installation_1","title":"Installation","text":"<p>To install <code>kubectl</code> issue the following command. <pre><code>curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\nchmod +x ./kubectl\nsudo mv ./kubectl /usr/local/bin/kubectl\n</code></pre></p>"},{"location":"getting-started/basic-usage/#enable-kubectl-auto-completion-optional","title":"Enable kubectl auto-completion (optional)","text":"<p>To enable auto-completion for <code>kubectl</code>, run the following command. <pre><code>sudo bash -c \"kubectl completion bash &gt; /etc/bash_completion.d/kubectl\"\n. /etc/bash_completion.d/kubectl\n</code></pre></p> <p>You can also use a shorthand alias for <code>kubectl</code> that also works with completion:</p> <pre><code>alias k=kubectl\ncomplete -o default -F __start_kubectl k\n</code></pre>"},{"location":"getting-started/basic-usage/#containerlab","title":"Containerlab","text":"<p>Containerlab is a tool for creating virtual network topologies using container-based network emulation. It is particularly useful for testing and validating network configurations and automation workflows in a lab environment.</p>"},{"location":"getting-started/basic-usage/#installation_2","title":"Installation","text":"<p>To install Containerlab follow the instruction at https://containerlab.dev/install/ or simply run the following.</p> <pre><code>bash -c \"$(curl -sL https://get.containerlab.dev)\"\n</code></pre>"},{"location":"getting-started/basic-usage/#enable-containerlab-auto-completion-optional","title":"Enable containerlab auto-completion (optional)","text":"<p>To enable auto-completion for <code>containerlab</code>, run the following command. <pre><code>sudo bash -c \"containerlab completion bash &gt; /etc/bash_completion.d/containerlab\"\n. /etc/bash_completion.d/containerlab\n</code></pre></p>"},{"location":"getting-started/basic-usage/#infrastructure","title":"Infrastructure","text":"<p>The following contains information on how to deploy a Nokia SR Linux NOS container, which will consecutively be managed via SDCIO.</p>"},{"location":"getting-started/basic-usage/#installation_3","title":"Installation","text":"<p>Deploy a Nokia SR Linux device called <code>dev1</code> via Containerlab.</p> <pre><code>sudo containerlab deploy -t https://docs.sdcio.dev/artifacts/basic-usage/basic-usage.clab.yaml\n</code></pre> Topology Content <pre><code>name: basic-usage\nmgmt:\nnetwork: basic-usage\nipv4-subnet: 172.21.0.0/16\ntopology:\nkinds:\nnokia_srlinux:\ntype: ixr-d3\nimage: ghcr.io/nokia/srlinux:24.10.1\nnodes:\ndev1:\nkind: nokia_srlinux\nmgmt-ipv4: 172.21.0.200\n</code></pre>"},{"location":"getting-started/basic-usage/#verification","title":"Verification","text":"<p>The output of the containerlab deploy from above should indicate, that the node <code>clab-basic-usage-srl</code> is in the running state.</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502          Name         \u2502           Kind/Image          \u2502  State  \u2502 IPv4/6 Address \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 clab-basic-usage-dev1 \u2502 nokia_srlinux                 \u2502 running \u2502 172.21.0.200   \u2502\n\u2502                       \u2502 ghcr.io/nokia/srlinux:24.10.1 \u2502         \u2502 N/A            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"getting-started/basic-usage/#cert-manager","title":"Cert-Manager","text":"<p>The config-server (extension api-server) requires a certificate, which is created via cert-manager. The corresponding CA cert needs to be injected into the ca bundle spec field of the <code>api-service</code> resource.</p>"},{"location":"getting-started/basic-usage/#installation_4","title":"Installation","text":"<pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.18.2/cert-manager.yaml\n # If the SDCIO resources (see below) are being applied to fast, the webhook of the cert-manager is not already there.\n# Hence we need to wait for the resource be become available\nkubectl wait -n cert-manager --for=condition=Available=True --timeout=300s deployments.apps cert-manager-webhook\n</code></pre>"},{"location":"getting-started/basic-usage/#sdcio","title":"SDCIO","text":""},{"location":"getting-started/basic-usage/#installation_5","title":"Installation","text":"<p>To install SDCIO, copy the following snippet into a shell and execute it. <pre><code>kubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/colocated.yaml\n</code></pre></p> Artifact Content <pre><code>---\napiVersion: v1\nkind: Namespace\nmetadata:\nname: network-system\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: rollouts.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Rollout\nlistKind: RolloutList\nplural: rollouts\nsingular: rollout\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .spec.repoURL\nname: URL\ntype: string\n- jsonPath: .spec.ref\nname: REF\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Rollout is the Rollout for the Rollout API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: RolloutSpec defines the desired state of Rollout\nproperties:\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the repo\ntype: string\nkind:\ndefault: tag\ndescription: Kind defines the that the BranchOrTag string is a repository\nbranch or a tag\nenum:\n- branch\n- tag\n- hash\ntype: string\nproxy:\ndescription: Proxy defines the HTTP/HTTPS proxy to be used to connect\nto the repo.\nproperties:\nURL:\ndescription: URL specifies the base URL of the HTTP/HTTPS proxy\nserver.\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the proxy server\ntype: string\nrequired:\n- URL\n- credentials\ntype: object\nref:\ndescription: |-\nRef defines the branch or tag of the repository corresponding to the\nprovider schema version\ntype: string\nrepoURL:\ndescription: RepositoryURL specifies the base URL for a given repository\ntype: string\nskipUnavailableTarget:\ntype: boolean\nstrategy:\ntype: string\nrequired:\n- kind\n- ref\n- repoURL\n- strategy\ntype: object\nstatus:\ndescription: RolloutStatus defines the observed state of Rollout\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\ntargets:\ndescription: Targets defines the status of the rollout on the respective\ntarget\nitems:\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False,\nUnknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\nname:\ntype: string\nrequired:\n- name\ntype: object\ntype: array\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: targetsyncprofiles.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: TargetSyncProfile\nlistKind: TargetSyncProfileList\nplural: targetsyncprofiles\nsingular: targetsyncprofile\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .spec.sync[0].protocol\nname: PROTOCOL\ntype: string\n- jsonPath: .spec.sync[0].port\nname: PORT\ntype: string\n- jsonPath: .spec.sync[0].encoding\nname: ENCODING\ntype: string\n- jsonPath: .spec.sync[0].mode\nname: MODE\ntype: string\n- jsonPath: .spec.sync[0].interval\nname: INTERVAL\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: TargetSyncProfile is the Schema for the TargetSyncProfile API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetSyncProfileSpec defines the desired state of TargetSyncProfile\nproperties:\nbuffer:\ndefault: 0\nformat: int64\ntype: integer\nx-kubernetes-validations:\n- message: buffer is immutable\nrule: self == oldSelf\nsync:\nitems:\ndescription: TargetSyncProfileSync defines the desired state of\nTargetSyncProfileSync\nproperties:\nencoding:\nenum:\n- UNKNOWN\n- JSON\n- JSON_IETF\n- PROTO\n- CONFIG\ntype: string\ninterval:\ndefault: 60s\nformat: duration\ntype: string\nmode:\ndefault: get\nenum:\n- unknown\n- onChange\n- sample\n- once\n- get\ntype: string\nname:\ntype: string\npaths:\nitems:\ntype: string\nmaxItems: 10\ntype: array\nport:\ndefault: 57400\ndescription: Port defines the port on which the scan runs\nformat: int32\ntype: integer\nprotocol:\ndefault: gnmi\nenum:\n- unknown\n- gnmi\n- netconf\n- noop\ntype: string\nrequired:\n- mode\n- name\n- paths\n- port\n- protocol\ntype: object\nmaxItems: 10\ntype: array\nx-kubernetes-validations:\n- message: sync may only be added\nrule: oldSelf.all(x, x in self)\nvalidate:\ndefault: true\ntype: boolean\nx-kubernetes-validations:\n- message: validate is immutable\nrule: self == oldSelf\nworkers:\ndefault: 10\nformat: int64\ntype: integer\nx-kubernetes-validations:\n- message: workers is immutable\nrule: self == oldSelf\ntype: object\nx-kubernetes-validations:\n- message: sync is required once set\nrule: '!has(oldSelf.sync) || has(self.sync)'\ntype: object\nserved: true\nstorage: true\nsubresources: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: workspaces.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Workspace\nlistKind: WorkspaceList\nplural: workspaces\nsingular: workspace\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .spec.repoURL\nname: URL\ntype: string\n- jsonPath: .spec.ref\nname: REF\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Workspace is the Workspace for the Workspace API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: WorkspaceSpec defines the desired state of Workspace\nproperties:\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the repo\ntype: string\nkind:\ndefault: tag\ndescription: Kind defines the that the BranchOrTag string is a repository\nbranch or a tag\nenum:\n- branch\n- tag\n- hash\ntype: string\nproxy:\ndescription: Proxy defines the HTTP/HTTPS proxy to be used to connect\nto the repo.\nproperties:\nURL:\ndescription: URL specifies the base URL of the HTTP/HTTPS proxy\nserver.\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the proxy server\ntype: string\nrequired:\n- URL\n- credentials\ntype: object\nref:\ndescription: |-\nRef defines the branch or tag of the repository corresponding to the\nprovider schema version\ntype: string\nrepoURL:\ndescription: RepositoryURL specifies the base URL for a given repository\ntype: string\nrequired:\n- kind\n- ref\n- repoURL\ntype: object\nstatus:\ndescription: WorkspaceStatus defines the observed state of Workspace\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\ndeployedRef:\ndescription: DeployedRef is the reference that is deployed\ntype: string\nkind:\ndescription: Kind defines the that the BranchOrTag string is a repository\nbranch or a tag\nenum:\n- branch\n- tag\n- hash\ntype: string\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: subscriptions.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Subscription\nlistKind: SubscriptionList\nplural: subscriptions\nsingular: subscription\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .spec.protocol\nname: PROTOCOL\ntype: string\n- jsonPath: .spec.port\nname: PORT\ntype: string\n- jsonPath: .spec.encoding\nname: ENCODING\ntype: string\n- jsonPath: .spec.subscriptions[0].mode\nname: MODE\ntype: string\n- jsonPath: .spec.subscriptions[0].interval\nname: INTERVAL\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Subscription is the Schema for the Subscription API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: SubscriptionSpec defines the desired Subscription of Subscription\nproperties:\nencoding:\nenum:\n- PROTO\n- ASCII\ntype: string\nport:\ndefault: 57400\ndescription: Port defines the port on which the scan runs\nformat: int32\ntype: integer\nprotocol:\ndefault: gnmi\nenum:\n- unknown\n- gnmi\n- netconf\n- noop\ntype: string\nsubscriptions:\nitems:\ndescription: SubscriptionSync defines the desired Subscription of\nSubscriptionSync\nproperties:\nadminState:\ndefault: enabled\ndescription: AdminState allows to disable the subscription\nenum:\n- enabled\n- disabled\ntype: string\ndescription:\ndescription: Description details what the Subscription collection\nis about\ntype: string\ninterval:\nenum:\n- 1s\n- 15s\n- 30s\n- 60s\nformat: duration\ntype: string\nlabels:\nadditionalProperties:\ntype: string\ndescription: Labels can be defined as user defined data to provide\nextra context\ntype: object\nmode:\ndefault: sample\nenum:\n- unknown\n- onChange\n- sample\ntype: string\nname:\ndescription: Name defines the name of the group of the Subscription\nto be collected\ntype: string\npaths:\nitems:\ntype: string\nmaxItems: 128\ntype: array\nrequired:\n- mode\n- name\n- paths\ntype: object\nmaxItems: 128\ntype: array\ntarget:\ndescription: Targets defines the targets on which this Subscription\napplies\nproperties:\ntargetSelector:\ndescription: TargetSelector defines the selector used to select\nthe targets to which the config applies\nproperties:\nmatchExpressions:\ndescription: matchExpressions is a list of label selector\nrequirements. The requirements are ANDed.\nitems:\ndescription: |-\nA label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.\nproperties:\nkey:\ndescription: key is the label key that the selector\napplies to.\ntype: string\noperator:\ndescription: |-\noperator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.\ntype: string\nvalues:\ndescription: |-\nvalues is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\nitems:\ntype: string\ntype: array\nx-kubernetes-list-type: atomic\nrequired:\n- key\n- operator\ntype: object\ntype: array\nx-kubernetes-list-type: atomic\nmatchLabels:\nadditionalProperties:\ntype: string\ndescription: |-\nmatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\ntype: object\ntype: object\nx-kubernetes-map-type: atomic\ntype: object\nrequired:\n- port\n- protocol\n- target\ntype: object\nstatus:\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\ntargets:\ndescription: Targets defines the list of targets this resource applies\nto\nitems:\ntype: string\ntype: array\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: schemas.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Schema\nlistKind: SchemaList\nplural: schemas\nsingular: schema\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .spec.provider\nname: PROVIDER\ntype: string\n- jsonPath: .spec.version\nname: VERSION\ntype: string\n- jsonPath: .spec.repositories[0].repoURL\nname: URL\ntype: string\n- jsonPath: .spec.repositories[0].ref\nname: REF\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Schema is the Schema for the Schema API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: SchemaSpec defines the desired state of Schema\nproperties:\nprovider:\ndescription: Provider specifies the provider of the schema.\ntype: string\nx-kubernetes-validations:\n- message: provider is immutable\nrule: self == oldSelf\nrepositories:\ndescription: Repositories define the repositories used for building\nthe provider schema\nitems:\nproperties:\ncredentials:\ndescription: Credentials defines the name of the secret that\nholds the credentials to connect to the repo\ntype: string\ndirs:\ndescription: |-\nDirs defines the list of directories that identified the provider schema in src/dst pairs\nrelative within the repository\nitems:\ndescription: |-\nSrcDstPath provide a src/dst pair for the loader to download the schema from a specific src\nin the repository to a given destination in the schema server\nproperties:\ndst:\ndescription: Dst is the relative directory in the schema\nserver\ntype: string\nsrc:\ndescription: Src is the relative directory in the repository\nURL\ntype: string\nrequired:\n- dst\n- src\ntype: object\nmaxItems: 10\ntype: array\nkind:\ndefault: tag\ndescription: Kind defines the that the BranchOrTag string is\na repository branch or a tag\nenum:\n- branch\n- tag\n- hash\ntype: string\nproxy:\ndescription: Proxy defines the HTTP/HTTPS proxy to be used to\nconnect to the repo.\nproperties:\nURL:\ndescription: URL specifies the base URL of the HTTP/HTTPS\nproxy server.\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret\nthat holds the credentials to connect to the proxy server\ntype: string\nrequired:\n- URL\n- credentials\ntype: object\nref:\ndescription: |-\nRef defines the branch or tag of the repository corresponding to the\nprovider schema version\ntype: string\nrepoURL:\ndescription: RepositoryURL specifies the base URL for a given\nrepository\ntype: string\nschema:\ndescription: |-\nSchema provides the details of which files must be used for the models and which files/directories\ncana be excludes\nproperties:\nexcludes:\ndescription: Excludes defines the list of files/directories\nto be excluded\nitems:\ntype: string\nmaxItems: 64\ntype: array\nincludes:\ndescription: Excludes defines the list of files/directories\nto be excluded\nitems:\ntype: string\nmaxItems: 64\ntype: array\nmodels:\ndescription: Models defines the list of files/directories\nto be used as a model\nitems:\ntype: string\nmaxItems: 64\ntype: array\ntype: object\nrequired:\n- kind\n- ref\n- repoURL\n- schema\ntype: object\nmaxItems: 10\nminItems: 1\ntype: array\nversion:\ndescription: Version defines the version of the schema\ntype: string\nx-kubernetes-validations:\n- message: version is immutable\nrule: self == oldSelf\nrequired:\n- provider\n- repositories\n- version\ntype: object\nstatus:\ndescription: SchemaStatus defines the observed state of Schema\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\nrepositories:\ndescription: SchemaRepositoryStatus provides the array of repositories\nitems:\ndescription: SchemaRepositoryStatus provides the observed hash of\na repository\nproperties:\nreference:\ndescription: Reference indicating version of loaded repository\ntype: string\nrepoURL:\ndescription: RepoURL defines URL of the repository\ntype: string\ntype: object\ntype: array\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: discoveryvendorprofiles.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: DiscoveryVendorProfile\nlistKind: DiscoveryVendorProfileList\nplural: discoveryvendorprofiles\nsingular: discoveryvendorprofile\nscope: Namespaced\nversions:\n- name: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: DiscoveryVendorProfile is the Schema for the DiscoveryVendorProfile\nAPI\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: DiscoveryProfileSpec defines the desired state of DiscoveryProfile\nproperties:\ngnmi:\nproperties:\nencoding:\ndefault: JSON_IETF\nenum:\n- UNKNOWN\n- JSON\n- JSON_IETF\n- PROTO\n- ASCII\ntype: string\nx-kubernetes-validations:\n- message: encoding is immutable\nrule: self == oldSelf\nmodelMatch:\ntype: string\norganization:\ntype: string\npaths:\ndescription: Paths        DiscoveryPaths `json:\"paths\" protobuf:\"bytes,3,opt,name=paths\"`\nitems:\nproperties:\nkey:\ndescription: Key defines the key of the path for fast lookup\ntype: string\npath:\ndescription: Path associated with the key\ntype: string\nregex:\ndescription: Regex defines the regex to transform the value\ntype: string\nscript:\ndescription: Script defines the starlark script to transform\nthe value\ntype: string\nrequired:\n- key\n- path\ntype: object\ntype: array\npreserveNamespace:\ndefault: true\ntype: boolean\nx-kubernetes-validations:\n- message: preserveNamespace is immutable\nrule: self == oldSelf\nrequired:\n- organization\n- paths\ntype: object\nrequired:\n- gnmi\ntype: object\ntype: object\nserved: true\nstorage: true\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: targets.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Target\nlistKind: TargetList\nplural: targets\nsingular: target\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .status.conditions[?(@.type=='Ready')].message\nname: REASON\ntype: string\n- jsonPath: .spec.provider\nname: PROVIDER\ntype: string\n- jsonPath: .status.discoveryInfo.version\nname: VERSION\ntype: string\n- jsonPath: .spec.address\nname: ADDRESS\ntype: string\n- jsonPath: .status.discoveryInfo.platform\nname: PLATFORM\ntype: string\n- jsonPath: .status.discoveryInfo.serialNumber\nname: SERIALNUMBER\ntype: string\n- jsonPath: .status.discoveryInfo.macAddress\nname: MACADDRESS\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Target is the Schema for the Target API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetSpec defines the desired state of Target\nproperties:\naddress:\ndescription: Address defines the address to connect to the target\ntype: string\nconnectionProfile:\ndescription: ConnectionProfile define the profile used to connect\nto the target once discovered\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the target\ntype: string\nprovider:\ndescription: Provider specifies the provider using this target.\ntype: string\nsyncProfile:\ndescription: SyncProfile define the profile used to sync to the target\nconfig once discovered\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to connect\nto the target if mtls is used\ntype: string\nrequired:\n- address\n- connectionProfile\n- credentials\n- provider\ntype: object\nstatus:\ndescription: TargetStatus defines the observed state of Target\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\ndiscoveryInfo:\ndescription: Discovery info defines the information retrieved during\ndiscovery\nproperties:\nhostname:\ndescription: HostName associated with the target\ntype: string\nmacAddress:\ndescription: MacAddress associated with the target\ntype: string\nplatform:\ndescription: Platform associated with the target\ntype: string\nprotocol:\ndescription: Protocol used for discovery\ntype: string\nprovider:\ndescription: Type associated with the target\ntype: string\nserialNumber:\ndescription: SerialNumber associated with the target\ntype: string\nsupportedEncodings:\ndescription: Supported Encodings of the target\nitems:\ntype: string\ntype: array\nversion:\ndescription: Version associated with the target\ntype: string\ntype: object\nusedReferences:\ndescription: UsedReferences track the resource used to reconcile the\ncr\nproperties:\nconnectionProfileResourceVersion:\ntype: string\nsecretResourceVersion:\ntype: string\nsyncProfileResourceVersion:\ntype: string\ntlsSecretResourceVersion:\ntype: string\nrequired:\n- connectionProfileResourceVersion\n- syncProfileResourceVersion\ntype: object\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: targetconnectionprofiles.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: TargetConnectionProfile\nlistKind: TargetConnectionProfileList\nplural: targetconnectionprofiles\nsingular: targetconnectionprofile\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .spec.protocol\nname: PROTOCOL\ntype: string\n- jsonPath: .spec.port\nname: PORT\ntype: string\n- jsonPath: .spec.encoding\nname: ENCODING\ntype: string\n- jsonPath: .spec.insecure\nname: INSECURE\ntype: string\n- jsonPath: .spec.skipVerify\nname: SKIPVERIFY\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: TargetConnectionProfile is the Schema for the TargetConnectionProfile\nAPI\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetConnectionProfileSpec defines the desired state of\nTargetConnectionProfile\nproperties:\ncommitCandidate:\ndefault: candidate\nenum:\n- candidate\n- running\ntype: string\nx-kubernetes-validations:\n- message: UseOperationRemove is immutable\nrule: self == oldSelf\nconnectRetry:\ndefault: 10s\ntype: string\nx-kubernetes-validations:\n- message: connectRetry is immutable\nrule: self == oldSelf\nencoding:\nenum:\n- UNKNOWN\n- JSON\n- JSON_IETF\n- PROTO\ntype: string\nx-kubernetes-validations:\n- message: encoding is immutable\nrule: self == oldSelf\nincludeNS:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: includeNS is immutable\nrule: self == oldSelf\ninsecure:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: insecure is immutable\nrule: self == oldSelf\noperationWithNS:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: operationWithNS is immutable\nrule: self == oldSelf\nport:\ndefault: 57400\ndescription: Port defines the port on which the scan runs\nformat: int32\ntype: integer\nx-kubernetes-validations:\n- message: port is immutable\nrule: self == oldSelf\npreferredNetconfVersion:\ndefault: \"1.0\"\nenum:\n- \"1.0\"\n- \"1.1\"\ntype: string\nx-kubernetes-validations:\n- message: preferredNetconfVersion is immutable\nrule: self == oldSelf\nprotocol:\ndefault: gnmi\nenum:\n- unknown\n- gnmi\n- netconf\n- noop\ntype: string\nx-kubernetes-validations:\n- message: protocol is immutable\nrule: self == oldSelf\nskipVerify:\ndefault: true\ntype: boolean\nx-kubernetes-validations:\n- message: skipVerify is immutable\nrule: self == oldSelf\ntimeout:\ndefault: 10s\ntype: string\nx-kubernetes-validations:\n- message: timeout is immutable\nrule: self == oldSelf\nuseOperationRemove:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: UseOperationRemove is immutable\nrule: self == oldSelf\nrequired:\n- port\n- protocol\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: discoveryrules.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: DiscoveryRule\nlistKind: DiscoveryRuleList\nplural: discoveryrules\nsingular: discoveryrule\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: DiscoveryRule is the Schema for the DiscoveryRule API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: DiscoveryRuleSpec defines the desired state of DiscoveryRule\nproperties:\naddresses:\ndescription: IP Prefixes for which this discovery rule applies\nitems:\nproperties:\naddress:\ndescription: Address (specified as IP or DNS name) of the target/target(s)\ntype: string\nhostName:\ndescription: HostName of the ip prefix; used for /32 or /128\naddresses with discovery disabled\ntype: string\nrequired:\n- address\ntype: object\ntype: array\nconcurrentScans:\ndescription: number of concurrent IP scan\nformat: int64\ntype: integer\ndefaultSchema:\ndescription: |-\nDefaultSchema define the default schema used to connect to a target\nIndicates that discovery is disable; cannot be used for prefix based discovery rules\nproperties:\nprovider:\ndescription: Provider specifies the provider of the schema.\ntype: string\nversion:\ndescription: Version defines the version of the schema\ntype: string\nrequired:\n- provider\n- version\ntype: object\ndiscoveryProfile:\ndescription: DiscoveryProfile define the profiles the discovery controller\nuses to discover targets\nproperties:\nconnectionProfiles:\ndescription: |-\nConnectionProfiles define the list of profiles the discovery controller uses to discover the target.\nThe order in which they are specified is the order in which discovery is executed.\nitems:\ntype: string\ntype: array\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the target\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to connect\nto the target if mtls is used\ntype: string\nrequired:\n- connectionProfiles\n- credentials\ntype: object\nperiod:\ndescription: Period defines the wait period between discovery rule\nruns\ntype: string\npodSelector:\ndescription: PodSelector defines the pod selector for which this discovery\nrule applies\nproperties:\nmatchExpressions:\ndescription: matchExpressions is a list of label selector requirements.\nThe requirements are ANDed.\nitems:\ndescription: |-\nA label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.\nproperties:\nkey:\ndescription: key is the label key that the selector applies\nto.\ntype: string\noperator:\ndescription: |-\noperator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.\ntype: string\nvalues:\ndescription: |-\nvalues is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\nitems:\ntype: string\ntype: array\nx-kubernetes-list-type: atomic\nrequired:\n- key\n- operator\ntype: object\ntype: array\nx-kubernetes-list-type: atomic\nmatchLabels:\nadditionalProperties:\ntype: string\ndescription: |-\nmatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\ntype: object\ntype: object\nx-kubernetes-map-type: atomic\nprefixes:\ndescription: IP Prefixes for which this discovery rule applies\nitems:\nproperties:\nexcludes:\ndescription: IP Prefixes to be excluded\nitems:\ntype: string\ntype: array\nprefix:\ndescription: Prefix of the target/target(s)\ntype: string\nrequired:\n- prefix\ntype: object\ntype: array\nserviceDomain:\ndescription: |-\nServiceDomain defines the service domain of the cluster, used by svc discovery to identify the\ndomain name in the k8s cluster where the service reside.\ntype: string\nserviceSelector:\ndescription: ServiceSelector defines the service selector for which\nthis discovery rule applies\nproperties:\nmatchExpressions:\ndescription: matchExpressions is a list of label selector requirements.\nThe requirements are ANDed.\nitems:\ndescription: |-\nA label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.\nproperties:\nkey:\ndescription: key is the label key that the selector applies\nto.\ntype: string\noperator:\ndescription: |-\noperator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.\ntype: string\nvalues:\ndescription: |-\nvalues is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\nitems:\ntype: string\ntype: array\nx-kubernetes-list-type: atomic\nrequired:\n- key\n- operator\ntype: object\ntype: array\nx-kubernetes-list-type: atomic\nmatchLabels:\nadditionalProperties:\ntype: string\ndescription: |-\nmatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\ntype: object\ntype: object\nx-kubernetes-map-type: atomic\ntargetConnectionProfiles:\ndescription: |-\nTargetConnectionProfiles define the profile the discovery controller uses to create targets\nonce discovered\nitems:\nproperties:\nconnectionProfile:\ndescription: ConnectionProfile define the profile used to connect\nto the target once discovered\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that\nholds the credentials to connect to the target\ntype: string\nsyncProfile:\ndescription: SyncProfile define the profile used to sync to\nthe target config once discovered\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to\nconnect to the target if mtls is used\ntype: string\nrequired:\n- connectionProfile\n- credentials\ntype: object\ntype: array\ntargetTemplate:\ndescription: TargetTemplate defines the template the discovery controller\nuses to create the targets as a result of the discovery\nproperties:\nannotations:\nadditionalProperties:\ntype: string\ndescription: Annotations is a key value map to be copied to the\ntarget CR.\ntype: object\nlabels:\nadditionalProperties:\ntype: string\ndescription: Labels is a key value map to be copied to the target\nCR.\ntype: object\nnameTemplate:\ndescription: target name template\ntype: string\nx-kubernetes-validations:\n- message: nameTemplate is immutable\nrule: self == oldSelf\ntype: object\nrequired:\n- targetConnectionProfiles\ntype: object\nstatus:\ndescription: DiscoveryRuleStatus defines the observed state of DiscoveryRule\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\nstartTime:\ndescription: StartTime identifies when the dr got started\nformat: date-time\ntype: string\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiregistration.k8s.io/v1\nkind: APIService\nmetadata:\nname: v1alpha1.config.sdcio.dev\nspec:\ngroup: config.sdcio.dev\ngroupPriorityMinimum: 1000\ninsecureSkipTLSVerify: true\nservice:\nname: config-server\nnamespace: network-system\nport: 6443\nversion: v1alpha1\nversionPriority: 15\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: config-server\nnamespace: network-system\nspec:\nreplicas: 1\nselector:\nmatchLabels:\napp.kubernetes.io/name: config-server\nstrategy:\ntype: Recreate\ntemplate:\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nsdcio.dev/data-server: \"true\"\nspec:\ncontainers:\n- args:\n- --tls-cert-file=/apiserver.local.config/certificates/tls.crt\n- --tls-private-key-file=/apiserver.local.config/certificates/tls.key\n- --audit-log-path=-\n- --audit-log-maxage=0\n- --audit-log-maxbackup=0\n- --secure-port=6443\ncommand:\n- /app/config-server\nenv:\n- name: POD_IP\nvalueFrom:\nfieldRef:\nfieldPath: status.podIP\n- name: POD_NAMESPACE\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: metadata.namespace\n- name: NODE_NAME\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: spec.nodeName\n- name: NODE_IP\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: status.hostIP\n- name: PPROF_PORT\nvalue: \"8081\"\n- name: REVERTIVE\nvalue: \"true\"\n- name: ENABLE_SUBSCRIPTION\nvalue: \"true\"\n- name: ENABLE_TARGET\nvalue: \"true\"\n- name: ENABLE_TARGETDATASTORE\nvalue: \"true\"\n- name: ENABLE_TARGETCONFIGSERVER\nvalue: \"true\"\n- name: ENABLE_TARGETRECOVERYSERVER\nvalue: \"true\"\n- name: ENABLE_DISCOVERYRULE\nvalue: \"true\"\n- name: ENABLE_SCHEMA\nvalue: \"true\"\n- name: ENABLE_CONFIGSET\nvalue: \"true\"\n- name: ENABLE_WORKSPACE\nvalue: \"true\"\n- name: ENABLE_ROLLOUT\nvalue: \"true\"\nimage: ghcr.io/sdcio/config-server:v0.0.54\nimagePullPolicy: Always\nname: config-server\nports:\n- containerPort: 6443\nname: api-service\nvolumeMounts:\n- mountPath: /apiserver.local.config/certificates\nname: apiserver-certs\nreadOnly: true\n- mountPath: /config\nname: config-store\n- mountPath: /schemas\nname: schema-store\n- mountPath: /workspace\nname: workspace-store\n- args:\n- --config=/config/data-server.yaml\ncommand:\n- /app/data-server\nimage: ghcr.io/sdcio/data-server:v0.0.64\nimagePullPolicy: Always\nname: data-server\nports:\n- containerPort: 56000\nname: data-service\nvolumeMounts:\n- mountPath: /config\nname: data-server-config\n- mountPath: /cached/caches\nname: cache\n- mountPath: /schemas\nname: schema-store\n- mountPath: /schemadb\nname: schema-db\nsecurityContext:\nfsGroup: 10000\nrunAsGroup: 10000\nrunAsUser: 10000\nserviceAccountName: config-server\nvolumes:\n- configMap:\nname: data-server\nname: data-server-config\n- name: apiserver-certs\nsecret:\nsecretName: config-server-cert\n- emptyDir:\nsizeLimit: 10Gi\nname: cache\n- name: config-store\npersistentVolumeClaim:\nclaimName: pvc-config-store\n- name: schema-store\npersistentVolumeClaim:\nclaimName: pvc-schema-store\n- name: schema-db\npersistentVolumeClaim:\nclaimName: pvc-schema-db\n- name: workspace-store\npersistentVolumeClaim:\nclaimName: pvc-workspace-store\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\nname: allow-metrics-traffic\nnamespace: network-system\nspec:\ningress:\n- from:\n- namespaceSelector:\nmatchLabels:\nkubernetes.io/metadata.name: monitoring\nports:\n- port: 8443\nprotocol: TCP\n- from:\n- podSelector: {}\npodSelector:\nmatchLabels:\napp.kubernetes.io/name: config-server\npolicyTypes:\n- Ingress\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: allow-traffic-to-apiserver-extension\nnamespace: network-system\nspec:\ningress:\n- from:\n- ipBlock:\ncidr: 0.0.0.0/0\nports:\n- port: api-service\nprotocol: TCP\npodSelector:\nmatchLabels:\napp.kubernetes.io/name: config-server\npolicyTypes:\n- Ingress\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\nname: config-server-clusterrole\nrules:\n- apiGroups:\n- \"\"\nresources:\n- namespaces\n- secrets\n- services\n- pods\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- \"\"\nresources:\n- events\nverbs:\n- create\n- patch\n- apiGroups:\n- admissionregistration.k8s.io\nresources:\n- mutatingwebhookconfigurations\n- validatingwebhookconfigurations\n- validatingadmissionpolicies\n- validatingadmissionpolicybindings\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- flowcontrol.apiserver.k8s.io\nresources:\n- flowschemas\n- prioritylevelconfigurations\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- config.sdcio.dev\nresources:\n- configs\n- configs/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- config.sdcio.dev\nresources:\n- configsets\n- configsets/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- config.sdcio.dev\nresources:\n- deviations\n- deviations/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- targets\n- targets/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- targetconnectionprofiles\n- targetsyncprofiles\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- discoveryrules\n- discoveryrules/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- discoveryvendorprofiles\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- schemas\n- schemas/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- subscriptions\n- subscriptions/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- workspaces\n- workspaces/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- rollouts\n- rollouts/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- coordination.k8s.io\nresources:\n- leases\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\nname: config-server-metrics-auth-role\nrules:\n- apiGroups:\n- authentication.k8s.io\nresources:\n- tokenreviews\nverbs:\n- create\n- apiGroups:\n- subjectaccessreviews.k8s.io\nresources:\n- tokenreviews\nverbs:\n- create\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\nname: config-server-metrics-reader\nrules:\n- nonResourceURLs:\n- /metrics\nverbs:\n- get\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: config-server-clusterrolebinding\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: config-server-clusterrole\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: config-server-metrics-auth-rolebinding\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: config-server-metrics-auth-role\nsubjects:\n- kind: ServiceAccount\nname: controller-manager\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: config:system:auth-delegator\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\nname: aggregated-apiserver-role\nnamespace: network-system\nrules:\n- apiGroups:\n- \"\"\nresources:\n- serviceaccounts\nverbs:\n- get\n- apiGroups:\n- \"\"\nresources:\n- serviceaccounts/token\nverbs:\n- create\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\nname: config-auth-reader\nnamespace: kube-system\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: Role\nname: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: v1\ndata:\ndata-server.yaml: \"grpc-server:\\n  schema-server:\\n    enabled: true\\n    schemas-directory:\n./schemas\\n\\n  data-server:\\n    max-candidates: 16\\n\\n  max-recv-msg-size: 25165824\n# 24 * 1024 * 1024 (24MB)\\n\\ndatastores: # this specifies MAIN datastores\\n\\nschema-store:\\n\n\\ # type is either memory or persistent (default)\\n  type: persistent\\n  path:\n\\\"/schemadb\\\"\\n\\ncache: \\n  type: local\\n  store-type: badgerdb\\n  dir: \\\"/cached/caches\\\"\\n\\nprometheus:\\n\n\\ address: \\\":56090\\\"\"\nkind: ConfigMap\nmetadata:\nname: data-server\nnamespace: network-system\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-config-store\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-schema-db\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-schema-store\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-workspace-store\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\n---\napiVersion: v1\ndata:\ntls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZekNDQWt1Z0F3SUJBZ0lJSC9mSFZHenZ3cnN3RFFZSktvWklodmNOQVFFTEJRQXdaVEVMTUFrR0ExVUUKQmhNQ2RXNHhDekFKQmdOVkJBZ01Bbk4wTVFvd0NBWURWUVFIREFGc01Rb3dDQVlEVlFRS0RBRnZNUXN3Q1FZRApWUVFMREFKdmRURWtNQ0lHQTFVRUF3d2JZbUZ6YVdNdFkyVnlkR2xtYVdOaGRHVXRZWFYwYUc5eWFYUjVNQjRYCkRUSXlNRE16TVRBNU1UYzFNMW9YRFRNeU1ETXlPREE1TVRjMU5Gb3dIREVhTUJnR0ExVUVBeE1SWW1GemFXTXUKWkdWbVlYVnNkQzV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUN0TUt0eApjc3Rjdk8rdDVMazZRQkRBZ3g1akZCL2F1dStVb3BDR2Z6VitaRW5obldpaC8xMVZ2ek44cjhmdGZuUkZGTVZ6CmJqYlVhSXNDOFc1eGJDNXNpc2VrdnVBWDlpanUzMlFybEU0RTR1UzNYREdVZkhGSFhMcWxBRU9RclUvRzQ0RGgKa0I3ajJOcDRzbk9IckF0aDA3TStvbXBmVklhSTlkQmdYY3hsUE5QRkNNamlOb1VweVM4eXNha3RQRXFjZTBpawpmNDBYVERmN1YwekFFelI0QkE4Yzh0b05UMVNnSXFIV0xueERKcnZRempDaTVFN2NMNkpmTmhlZDQ5MUVNWlEwCmVnbkV5bXd6d1Jya3BYTkZ4RHJzSXpOZmhHelB6RGJLdmFIUHh5NUwvM3h3clZ3VHllbklaOVExK0tjemtCSksKRXZIaVVKL1BML0VYZkloakFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVQpCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3TFFZRFZSMFJCQ1l3SklJSmJHOWpZV3hvYjNOMGdoRmlZWE5wCll5NWtaV1poZFd4MExuTjJZNGNFZndBQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFEa1hsbGZMTlpzWDEKYmp1b0h4RXVUWitaODlMWUxPUDBMM0dHMFgwdVdkZzJFcXY1bmZNRHVRVmJIRmt5dVo3ZDlDY01QYk12MTdDWgoxZGwwQk1GQTJkTkJzK3V1UXFIUFh3RkI4SFdPSDhBc1pMMnYvbG91T3g2dU1QQk9uWUhuQ3pFY21FQXZoR2dLCkpXMDNkd2QwNlJPeUdLT29qSklFTlRnd0xnQ1dZSytPWmIzQklyMUJqS012Q2dHN3pJVDFUUVNna3hGN1NGNzUKYk5BaEdOa0NWMGVrSnNXQWk1UGhzVS9IdWthdGVHUGNMS3hia0RGdHpSV2tRNmdKUXhkZmVuOVBKTjVJVCt4RQpFci8wYUkrOFM5Y1FPUnk0VTNDSFRodmlnOGFyZ3FucmFWMU92OXZNTWxzZ3pnYXc3SjdaeGtkWWwrSkMyWUcvCjJrUThVd1IzQnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\ntls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBclRDcmNYTExYTHp2cmVTNU9rQVF3SU1lWXhRZjJycnZsS0tRaG44MWZtUko0WjFvCm9mOWRWYjh6ZksvSDdYNTBSUlRGYzI0MjFHaUxBdkZ1Y1d3dWJJckhwTDdnRi9Zbzd0OWtLNVJPQk9Ma3Qxd3gKbEh4eFIxeTZwUUJEa0sxUHh1T0E0WkFlNDlqYWVMSnpoNndMWWRPelBxSnFYMVNHaVBYUVlGM01aVHpUeFFqSQo0amFGS2Nrdk1yR3BMVHhLbkh0SXBIK05GMHczKzFkTXdCTTBlQVFQSFBMYURVOVVvQ0toMWk1OFF5YTcwTTR3Cm91Uk8zQytpWHpZWG5lUGRSREdVTkhvSnhNcHNNOEVhNUtWelJjUTY3Q016WDRSc3o4dzJ5cjJoejhjdVMvOTgKY0sxY0U4bnB5R2ZVTmZpbk01QVNTaEx4NGxDZnp5L3hGM3lJWXdJREFRQUJBb0lCQUJWWU16ajNLZU1URWdMLwpkbWljYnJRYk5NcUhOMm5Rc2loQ1pNZCt0QXdRdGg1Tk5SRUtGT20xZDlYOUlBbkFGUHBTbGdjazVUTUdjMk40CmQrRVlzUndGZXBkdVF0WVJLM2hOSmQ1TkY5UjRWakhXOWZGVDZPNGZtbzB0WENaZmhiNkFXV2p6Unl0VGxaRmMKaE9xS3BKaDQ2OVZqVlBMTXl3dmtKN3RJdENFaHl4b0t0VVhwcm45SXBLNnNUa051OTFmMVA4czJNbDd1RlVqYwpJdGhMb3JnMEYyU3RaeEJmVDJGaFRYaFZxRlRJS1pmazFGbnRpbUwyWlQrRXZzQlpnZHYwa2Z1Q2hFdE5jRW1PCnRZc2dKT3ExTWF5M2d0dlk3VDB6WkRtTTIrOVpKQ0JLcm8yV2IxdGw0RHNnaWNkR0I2SlhnTi81aklSMTNmbDUKMTRJd1hza0NnWUVBemtQb1MrTko0QkJkR3RYem5tZWVhRFFQVVU0dkF1R3YyU2VtajR3RG1KRXB6aDdoMWlQZAprVWxmYjcxZ1VMbmk0SDVkVFlyVFpwOElUaXZvM3A1bUNrV3lFV09wMmx4VUZoM3JnVWN6NWt0RUhkejl1bjNoCnFYNVJpTWlkM0Y3dWRIODdqYTdJVi9mUEFGSnlremQrWHNaZGFuT0tPK1UvV0t2ek0rSFEzUThDZ1lFQTF2TWoKdml3dnFxM0FBa0VpN2RlOUxLUE1uS1N5VE9BdHQzS2dqV1RLNU5aQUdqeWpoSGxEbjRCempSS25DWk8xY0lJZwo0Wnl1VzQrUlB5aGQreEFubzVoMVh0Ny9LYzNFaW1ucjBLU0ZmRWVza2NORFIyVHNTdCtjYTl6aFFPTFJ0TWRCCnE5OWZDeFprK1pmcEhpSzJCK0pHVExNdVJRY0tDYU43RldKTkIyMENnWUJhc2k5bGx3WjMySm9uMzZYa3BDbGEKSm5JSnpUZ01xMUlZU1VBSzVJVDhRL0ErNndOZ2xwcXBkTHJiTmtrd2xkdjEzSHFJU3gvVGd1QXpCMG01QWF0YQpudlRDZ3JGQUM5TUplcFNBWHQrcVJyUW44WEU3M0hncWdCbTM3SWJGVEpUTGN0cXIzUXZJNm5VQjdqN2xEc1NwClJjM3pyZVE5bS9yenNZQVo4eFJVN3dLQmdRQ0JYTjg4Q3JlOVRzaHFFdTJFbXZ4ZEswOXZUcWVJSUxzaTFyZk4Kb01XREozWjQwOW5OVm5YZVBwNU1YdGRzcWhyZVZWS1l0WVV4MFp1bW1STEdrSmhxbXN5NGhoaW0vaEcxQTc1SwpXVm1FekZZTmU2aTRCUU00cEk4dFUwZTFsMHlDTWhGUjhTTHdOMUFaN3RUN3NBUkJobXFzcW9IRVJWSkRMc0phCndraDltUUtCZ0NYR2xoZzY4aVMzMldmSWVtYUFRMTJpNFRUUk1FNWppTFl0ZlkyREJTMDBWV3NxY0l1OEFUWm0KVHVoZHBRVG9mKzE3LzFyU0cyYnFaWFA2L0h3ak14OTVIdWlXbjVKSjA3RTduOUVCUDlkQTY0K0lHdWlvd0h5RAo2a3g3VVhuTUtTYXdiV2JxZ1JGZTFOZEdLbkh0ZE5GOGxndEdjdytxUTk3YkIreXFreXMxCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nkind: Secret\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: config-server-cert\nnamespace: network-system\ntype: kubernetes.io/tls\n---\napiVersion: v1\nkind: Secret\nmetadata:\nannotations:\nkubernetes.io/service-account.name: config-server\nname: config-server-token\nnamespace: network-system\ntype: kubernetes.io/service-account-token\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: config-server-metrics\nnamespace: network-system\nspec:\nports:\n- name: metrics\nport: 8443\nprotocol: TCP\ntargetPort: 8443\nselector:\napp.kubernetes.io/name: config-server\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: config-server-target-metrics\nnamespace: network-system\nspec:\nports:\n- name: targetmetrics\nport: 9443\nprotocol: TCP\ntargetPort: 9443\nselector:\napp.kubernetes.io/name: config-server\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: config-server\nnamespace: network-system\nspec:\nports:\n- name: api-service\nport: 6443\ntargetPort: api-service\nselector:\napp.kubernetes.io/name: config-server\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: data-server\nnamespace: network-system\nspec:\nports:\n- name: data-service\nport: 56000\nprotocol: TCP\ntargetPort: data-service\nselector:\nsdcio.dev/data-server: \"true\"\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\nname: config-server\nnamespace: network-system\n</code></pre>"},{"location":"getting-started/basic-usage/#verification_1","title":"Verification","text":"<p>To verify that the installation did succeed, the following resources can be checked.</p>"},{"location":"getting-started/basic-usage/#api-registration","title":"API Registration","text":"<p>Checking the api-registrations exist. <pre><code>kubectl get apiservices.apiregistration.k8s.io | grep \"sdcio.dev\\|NAME\"\n</code></pre></p> <p>The two services should be available. <pre><code>NAME                                   SERVICE                        AVAILABLE   AGE\nv1alpha1.config.sdcio.dev              network-system/config-server   True        6d\nv1alpha1.inv.sdcio.dev                 Local                          True        6d\n</code></pre> If the apiservices do not appear or do not show up as available, follow the Troubleshooting section.</p>"},{"location":"getting-started/basic-usage/#basic-usage-scenario","title":"Basic Usage Scenario","text":"<p>In the following the different Kubernetes resources will be created, which are needed to manage the previously deployed SR Linux instance.</p>"},{"location":"getting-started/basic-usage/#installation_6","title":"Installation","text":"<pre><code># Nokia SR Linux Yang Schema\nkubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/schema-nokia-srl-24.10.1.yaml\n# Connection Profile\nkubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/target-conn-profile-gnmi.yaml\n# Sync Profile\nkubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/target-sync-profile-gnmi.yaml\n# SRL Secret\nkubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/secret-srl.yaml\n# Discovery Vendor Profile\nkubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/discoveryvendor-profile-nokia-srlinux.yaml\n# Discovery Rule\nkubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/discovery_address.yaml\n</code></pre> Nokia SR Linux Yang Schema Content <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: srl.nokia.sdcio.dev-24.10.1\nnamespace: default\nspec:\nprovider: srl.nokia.sdcio.dev\nrepositories:\n- dirs:\n- dst: .\nsrc: srlinux-yang-models\nkind: tag\nref: v24.10.1\nrepoURL: https://github.com/nokia/srlinux-yang-models\nschema:\nexcludes:\n- .*tools.*\nincludes:\n- ietf\n- openconfig/extensions\n- openconfig/openconfig-extensions.yang\nmodels:\n- srl_nokia/models\n- dirs:\n- dst: deviations\nsrc: .\nkind: branch\nref: v24.10\nrepoURL: https://github.com/sdcio/srlinux-yang-patch\nschema:\nmodels:\n- deviations\nversion: 24.10.1\n</code></pre> Discovery Rule Content <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dev1-address\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 1\naddresses:\n- address: 172.21.0.200\nhostName: dev1\ndiscoveryProfile:\ncredentials: srl.nokia.sdcio.dev connectionProfiles:\n- gnmi-skipverify\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-get\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\n</code></pre> Connection Profile Content <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetConnectionProfile\nmetadata:\nname: gnmi-skipverify\nnamespace: default\nspec:\nport: 57400\nprotocol: gnmi\nencoding: JSON_IETF\nskipVerify: true\ninsecure: false\n</code></pre> Sync Profile Content <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: gnmi-get\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: gnmi\npaths:\n- /\nmode: get\nencoding: JSON_IETF\ninterval: 30s\n</code></pre> Nokia SR Linux Secret Content <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: srl.nokia.sdcio.dev namespace: default\ntype: kubernetes.io/basic-auth\nstringData:\nusername: admin\npassword: NokiaSrl1!\n</code></pre> Nokia SR Linux DiscoveryVendorProfile content <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryVendorProfile\nmetadata:\nname: srl.nokia.sdcio.dev\nnamespace: default\nspec:\ngnmi:\norganization: Nokia\nmodelMatch: nokia.com:srlinux\n#encoding: PROTO\npaths:\n# Some vendors return a JSON IETF blob of data with a different gNMI path than the requested one if keys are not specified.\n# Make sure to include keys in the XPATH when the encoding is JSON_IETF. Alternatively use PROTO or ASCII encoding.\n- key: version\npath: platform/control[slot=A]/software-version\nregex: ^v?(\\d+\\.\\d+\\.\\d+)\n- key: platform\npath: platform/chassis/type\n- key: hostname\npath: system/name/host-name\n- key: serialNumber\npath: platform/chassis/serial-number\n- key: macAddress\npath: platform/chassis/hw-mac-address\n</code></pre>"},{"location":"getting-started/basic-usage/#verification_2","title":"Verification","text":"<p>When running the below command, you are provided with an overview of all the SDCIO originating CRs in the system.</p> <pre><code>kubectl get sdc\n</code></pre> <p>First of all the <code>Ready</code> flag of the <code>Schema</code> CR is expected to be <code>True</code>. Which indicates, that the provided Yang Schema was successfully downloaded. Next, the <code>DiscoveryRule</code> is supposed to be <code>Ready=True</code>, which is a prerequisite for the <code>Target</code> to be created by the <code>DiscoverRule</code> controller. On the Target, the <code>Ready</code> field is expected to be <code>True</code> and Version, Address, Platform, Serial number and MAC address fields should be populated. Furthermore, the <code>TargetConnectionProfile</code> and <code>TargetSyncProfile</code> should be present and ready as well. All in all the output should look similar to the following: <pre><code>NAME\nconfigblame.config.sdcio.dev/dev1\n\nNAME                              TYPE     TARGET         DEVIATIONS\ndeviation.config.sdcio.dev/dev1   target   default/dev1   708\n\nNAME\nrunningconfig.config.sdcio.dev/dev1\n\nNAME                                       READY\ndiscoveryrule.inv.sdcio.dev/dev1-address   True\n\nNAME                                                       AGE\ndiscoveryvendorprofile.inv.sdcio.dev/srl.nokia.sdcio.dev   20h\n\nNAME                                               READY   PROVIDER              VERSION   URL                                            REF\nschema.inv.sdcio.dev/srl.nokia.sdcio.dev-24.10.1   True    srl.nokia.sdcio.dev   24.10.1   https://github.com/nokia/srlinux-yang-models   v24.10.1\n\nNAME                                                    PROTOCOL   PORT    ENCODING    INSECURE   SKIPVERIFY\ntargetconnectionprofile.inv.sdcio.dev/gnmi-skipverify   gnmi       57400   JSON_IETF   false      true\n\nNAME                        READY   REASON   PROVIDER              VERSION   ADDRESS        PLATFORM      SERIALNUMBER     MACADDRESS\ntarget.inv.sdcio.dev/dev1   True             srl.nokia.sdcio.dev   24.10.1   172.21.0.200   7220 IXR-D3   Sim Serial No.   1A:0D:00:FF:00:00\n\nNAME                                       PROTOCOL   PORT    ENCODING    MODE   INTERVAL\ntargetsyncprofile.inv.sdcio.dev/gnmi-get   gnmi       57400   JSON_IETF   get    30s\n</code></pre></p>"},{"location":"getting-started/basic-usage/#retrieve-configuration","title":"Retrieve Configuration","text":"<p>To retrieve the running configuration from the device, the <code>RunningConfig</code> CR can be queried. It contains an empty spec, but the config is presented in the <code>status</code> -&gt; <code>value</code> field.</p> <pre><code>kubectl get runningconfigs.config.sdcio.dev dev1 </code></pre> <p>The output is quite extensive so lets just take a look at the network-instance configuration.</p> <pre><code>kubectl get runningconfigs.config.sdcio.dev dev1 -ojsonpath=\"{.status.value.network-instance}\" | jq\n</code></pre> <p>Output: <pre><code>[\n{\n\"admin-state\": \"enable\",\n\"description\": \"Management network instance\",\n\"interface\": [\n{\n\"name\": \"mgmt0.0\"\n}\n],\n\"name\": \"mgmt\",\n\"protocols\": {\n\"linux\": {\n\"export-neighbors\": true,\n\"export-routes\": true,\n\"import-routes\": true\n}\n},\n\"type\": \"ip-vrf\"\n}\n]\n</code></pre></p>"},{"location":"getting-started/basic-usage/#apply-config","title":"Apply Config","text":"<p>Before we apply a configuration to the device, we check the current interface configuration of the device. You should only see the management interface <code>mgmt0</code> configured. <pre><code>kubectl get runningconfigs.config.sdcio.dev dev1 -ojsonpath=\"{.status.value.interface}\" | jq\n</code></pre> Output: <pre><code>[\n{\n\"admin-state\": \"enable\",\n\"name\": \"mgmt0\",\n\"subinterface\": [\n{\n\"admin-state\": \"enable\",\n\"index\": 0,\n\"ipv4\": {\n\"admin-state\": \"enable\",\n\"dhcp-client\": {}\n},\n\"ipv6\": {\n\"admin-state\": \"enable\",\n\"dhcp-client\": {}\n}\n}\n]\n}\n]\n</code></pre></p> <p>To apply configuration for the <code>dev1</code> device apply the following <code>Config</code> CR.</p> <pre><code>kubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/config.yaml\n</code></pre> Config Content <pre><code>apiVersion: config.sdcio.dev/v1alpha1\nkind: Config\nmetadata:\nname: test\nnamespace: default\nlabels:\nconfig.sdcio.dev/targetName: dev1\nconfig.sdcio.dev/targetNamespace: default\nspec:\npriority: 10\nconfig:\n- path: /\nvalue:\ninterface:\n- name: \"system0\"\nadmin-state: \"enable\"\ndescription: \"k8s-system0-dummy\"\n</code></pre> <p>The configuration is applied to the device and can be verified by checking the running config again. <pre><code>kubectl get runningconfigs.config.sdcio.dev dev1 -ojsonpath=\"{.status.value.interface}\" | jq\n</code></pre></p> <p>After successful application of the configuration the new interface <code>system0</code> with its properties should be present. <pre><code>[\n{\n\"admin-state\": \"enable\",\n\"name\": \"mgmt0\",\n\"subinterface\": [\n{\n\"admin-state\": \"enable\",\n\"index\": 0,\n\"ipv4\": {\n\"admin-state\": \"enable\",\n\"dhcp-client\": {}\n},\n\"ipv6\": {\n\"admin-state\": \"enable\",\n\"dhcp-client\": {}\n}\n}\n]\n},\n{\n\"admin-state\": \"enable\",\n\"description\": \"k8s-system0-dummy\",\n\"name\": \"system0\"\n}\n]\n</code></pre></p>"},{"location":"getting-started/basic-usage/#apply-configset","title":"Apply ConfigSet","text":"<p>To apply a <code>ConfigSet</code>, that is a configuration template that can be applied to multiple devices, apply the following <code>ConfigSet</code>.</p> <pre><code>kubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/configset.yaml\n</code></pre> ConfigSet Content <pre><code>apiVersion: config.sdcio.dev/v1alpha1\nkind: ConfigSet\nmetadata:\nname: intent1\nnamespace: default\nspec:\ntarget:\ntargetSelector:\nmatchLabels:\nsdcio.dev/region: us-east\npriority: 10\nconfig:\n- path: /\nvalue:\ninterface:\n- name: ethernet-1/1\nadmin-state: \"enable\"\ndescription: \"intent1\"\nvlan-tagging: true\nsubinterface:\n- index: 2\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 2\n- index: 3\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 3\n- index: 4\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 4\n</code></pre> <p>This configuration can now also be verified with the same command used above or by connecting to the device with <code>ssh clab-basic-usage-dev1</code> and checking the configuration with the command <code>show interfaces all</code>.</p>"},{"location":"install/1_overview/","title":"Overview","text":"<p>The schema driven configuration system (<code>sdc</code>) consists of 4 components:</p> <ul> <li>schema-server</li> <li>data-server</li> <li>cache</li> <li>config-server</li> </ul> <p>The <code>config-server</code> depends on Kubernetes, but the other 3 components (<code>schema-server</code>, <code>data-server</code> and <code>cache</code>) can be deployed independent of Kubernetes.</p>"},{"location":"install/2_prereq/","title":"Pre-Requisites","text":""},{"location":"install/2_prereq/#kubectl","title":"kubectl","text":"<p>First install kubectl if not already installed</p>"},{"location":"install/2_prereq/#auto-completions-for-kubectl-optional","title":"Auto completions for kubectl (optional)","text":"bashzsh <pre><code>source &lt;(kubectl completion bash)\nalias k=kubectl\ncomplete -o default -F __start_kubectl k\n</code></pre> <pre><code>source &lt;(kubectl completion zsh)\nalias k=kubectl\ncomplete -F _start_kubectl k\n</code></pre>"},{"location":"install/2_prereq/#install-kubernetes-optional","title":"Install Kubernetes (optional)","text":"<p>To install <code>sdc</code> on a Kubernetes cluster we first need to install a Kubernetes cluster.  Other than the minimum version being <code>v1.29</code>1, <code>sdc</code> has no special requirements on the <code>k8s</code> cluster, so any <code>k8s</code> flavor should work, bearing in mind the minimum version1 </p> kindother <p>First install kind using kind</p> <p>In this example we install a <code>kind</code> cluster with name <code>sdc</code>. </p> <pre><code>kind create cluster --name sdc\n</code></pre>"},{"location":"install/2_prereq/#install-cert-manager","title":"Install Cert-Manager","text":"<p>The config-server (extension api-server) requires a certificate, which is created via cert-manager. The corresponding CA cert needs to be injected into the cabundle spec field of the <code>api-service</code> resource.</p> <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.3/cert-manager.yaml\n# If the SDCIO resources, see below are being applied to fast, the webhook of the cert-manager is not already there.\n# Hence we need to wait for the resource be become Available\nkubectl wait -n cert-manager --for=condition=Available=True --timeout=300s deployments.apps cert-manager-webhook\n</code></pre> <ol> <li> <p>A minimum Kubernetes version of v1.29 is required to support API Priority and Fairness \u21a9\u21a9</p> </li> </ol>"},{"location":"install/3_k8s_collocated/","title":"Kubernetes-collocated","text":"<p>First ensure the pre-requisites are met</p>"},{"location":"install/3_k8s_collocated/#install-sdc-components","title":"Install SDC Components","text":"<p>Once the cluster is deployed we install the <code>sdc</code> components. These manifests deploy <code>sdc</code> as a deployment where the pod contains 2 containers:</p> <ol> <li>the config-server container with the various controllers</li> <li>the data-server/schema-server/cache collocated in a single container</li> </ol> <p>To install SDCIO, copy the following snippet into a shell and execute it. <pre><code>kubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/colocated.yaml\n</code></pre></p> Artifact Content <pre><code>---\napiVersion: v1\nkind: Namespace\nmetadata:\nname: network-system\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: rollouts.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Rollout\nlistKind: RolloutList\nplural: rollouts\nsingular: rollout\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .spec.repoURL\nname: URL\ntype: string\n- jsonPath: .spec.ref\nname: REF\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Rollout is the Rollout for the Rollout API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: RolloutSpec defines the desired state of Rollout\nproperties:\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the repo\ntype: string\nkind:\ndefault: tag\ndescription: Kind defines the that the BranchOrTag string is a repository\nbranch or a tag\nenum:\n- branch\n- tag\n- hash\ntype: string\nproxy:\ndescription: Proxy defines the HTTP/HTTPS proxy to be used to connect\nto the repo.\nproperties:\nURL:\ndescription: URL specifies the base URL of the HTTP/HTTPS proxy\nserver.\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the proxy server\ntype: string\nrequired:\n- URL\n- credentials\ntype: object\nref:\ndescription: |-\nRef defines the branch or tag of the repository corresponding to the\nprovider schema version\ntype: string\nrepoURL:\ndescription: RepositoryURL specifies the base URL for a given repository\ntype: string\nskipUnavailableTarget:\ntype: boolean\nstrategy:\ntype: string\nrequired:\n- kind\n- ref\n- repoURL\n- strategy\ntype: object\nstatus:\ndescription: RolloutStatus defines the observed state of Rollout\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\ntargets:\ndescription: Targets defines the status of the rollout on the respective\ntarget\nitems:\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False,\nUnknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\nname:\ntype: string\nrequired:\n- name\ntype: object\ntype: array\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: targetsyncprofiles.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: TargetSyncProfile\nlistKind: TargetSyncProfileList\nplural: targetsyncprofiles\nsingular: targetsyncprofile\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .spec.sync[0].protocol\nname: PROTOCOL\ntype: string\n- jsonPath: .spec.sync[0].port\nname: PORT\ntype: string\n- jsonPath: .spec.sync[0].encoding\nname: ENCODING\ntype: string\n- jsonPath: .spec.sync[0].mode\nname: MODE\ntype: string\n- jsonPath: .spec.sync[0].interval\nname: INTERVAL\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: TargetSyncProfile is the Schema for the TargetSyncProfile API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetSyncProfileSpec defines the desired state of TargetSyncProfile\nproperties:\nbuffer:\ndefault: 0\nformat: int64\ntype: integer\nx-kubernetes-validations:\n- message: buffer is immutable\nrule: self == oldSelf\nsync:\nitems:\ndescription: TargetSyncProfileSync defines the desired state of\nTargetSyncProfileSync\nproperties:\nencoding:\nenum:\n- UNKNOWN\n- JSON\n- JSON_IETF\n- PROTO\n- CONFIG\ntype: string\ninterval:\ndefault: 60s\nformat: duration\ntype: string\nmode:\ndefault: get\nenum:\n- unknown\n- onChange\n- sample\n- once\n- get\ntype: string\nname:\ntype: string\npaths:\nitems:\ntype: string\nmaxItems: 10\ntype: array\nport:\ndefault: 57400\ndescription: Port defines the port on which the scan runs\nformat: int32\ntype: integer\nprotocol:\ndefault: gnmi\nenum:\n- unknown\n- gnmi\n- netconf\n- noop\ntype: string\nrequired:\n- mode\n- name\n- paths\n- port\n- protocol\ntype: object\nmaxItems: 10\ntype: array\nx-kubernetes-validations:\n- message: sync may only be added\nrule: oldSelf.all(x, x in self)\nvalidate:\ndefault: true\ntype: boolean\nx-kubernetes-validations:\n- message: validate is immutable\nrule: self == oldSelf\nworkers:\ndefault: 10\nformat: int64\ntype: integer\nx-kubernetes-validations:\n- message: workers is immutable\nrule: self == oldSelf\ntype: object\nx-kubernetes-validations:\n- message: sync is required once set\nrule: '!has(oldSelf.sync) || has(self.sync)'\ntype: object\nserved: true\nstorage: true\nsubresources: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: workspaces.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Workspace\nlistKind: WorkspaceList\nplural: workspaces\nsingular: workspace\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .spec.repoURL\nname: URL\ntype: string\n- jsonPath: .spec.ref\nname: REF\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Workspace is the Workspace for the Workspace API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: WorkspaceSpec defines the desired state of Workspace\nproperties:\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the repo\ntype: string\nkind:\ndefault: tag\ndescription: Kind defines the that the BranchOrTag string is a repository\nbranch or a tag\nenum:\n- branch\n- tag\n- hash\ntype: string\nproxy:\ndescription: Proxy defines the HTTP/HTTPS proxy to be used to connect\nto the repo.\nproperties:\nURL:\ndescription: URL specifies the base URL of the HTTP/HTTPS proxy\nserver.\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the proxy server\ntype: string\nrequired:\n- URL\n- credentials\ntype: object\nref:\ndescription: |-\nRef defines the branch or tag of the repository corresponding to the\nprovider schema version\ntype: string\nrepoURL:\ndescription: RepositoryURL specifies the base URL for a given repository\ntype: string\nrequired:\n- kind\n- ref\n- repoURL\ntype: object\nstatus:\ndescription: WorkspaceStatus defines the observed state of Workspace\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\ndeployedRef:\ndescription: DeployedRef is the reference that is deployed\ntype: string\nkind:\ndescription: Kind defines the that the BranchOrTag string is a repository\nbranch or a tag\nenum:\n- branch\n- tag\n- hash\ntype: string\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: subscriptions.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Subscription\nlistKind: SubscriptionList\nplural: subscriptions\nsingular: subscription\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .spec.protocol\nname: PROTOCOL\ntype: string\n- jsonPath: .spec.port\nname: PORT\ntype: string\n- jsonPath: .spec.encoding\nname: ENCODING\ntype: string\n- jsonPath: .spec.subscriptions[0].mode\nname: MODE\ntype: string\n- jsonPath: .spec.subscriptions[0].interval\nname: INTERVAL\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Subscription is the Schema for the Subscription API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: SubscriptionSpec defines the desired Subscription of Subscription\nproperties:\nencoding:\nenum:\n- PROTO\n- ASCII\ntype: string\nport:\ndefault: 57400\ndescription: Port defines the port on which the scan runs\nformat: int32\ntype: integer\nprotocol:\ndefault: gnmi\nenum:\n- unknown\n- gnmi\n- netconf\n- noop\ntype: string\nsubscriptions:\nitems:\ndescription: SubscriptionSync defines the desired Subscription of\nSubscriptionSync\nproperties:\nadminState:\ndefault: enabled\ndescription: AdminState allows to disable the subscription\nenum:\n- enabled\n- disabled\ntype: string\ndescription:\ndescription: Description details what the Subscription collection\nis about\ntype: string\ninterval:\nenum:\n- 1s\n- 15s\n- 30s\n- 60s\nformat: duration\ntype: string\nlabels:\nadditionalProperties:\ntype: string\ndescription: Labels can be defined as user defined data to provide\nextra context\ntype: object\nmode:\ndefault: sample\nenum:\n- unknown\n- onChange\n- sample\ntype: string\nname:\ndescription: Name defines the name of the group of the Subscription\nto be collected\ntype: string\npaths:\nitems:\ntype: string\nmaxItems: 128\ntype: array\nrequired:\n- mode\n- name\n- paths\ntype: object\nmaxItems: 128\ntype: array\ntarget:\ndescription: Targets defines the targets on which this Subscription\napplies\nproperties:\ntargetSelector:\ndescription: TargetSelector defines the selector used to select\nthe targets to which the config applies\nproperties:\nmatchExpressions:\ndescription: matchExpressions is a list of label selector\nrequirements. The requirements are ANDed.\nitems:\ndescription: |-\nA label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.\nproperties:\nkey:\ndescription: key is the label key that the selector\napplies to.\ntype: string\noperator:\ndescription: |-\noperator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.\ntype: string\nvalues:\ndescription: |-\nvalues is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\nitems:\ntype: string\ntype: array\nx-kubernetes-list-type: atomic\nrequired:\n- key\n- operator\ntype: object\ntype: array\nx-kubernetes-list-type: atomic\nmatchLabels:\nadditionalProperties:\ntype: string\ndescription: |-\nmatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\ntype: object\ntype: object\nx-kubernetes-map-type: atomic\ntype: object\nrequired:\n- port\n- protocol\n- target\ntype: object\nstatus:\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\ntargets:\ndescription: Targets defines the list of targets this resource applies\nto\nitems:\ntype: string\ntype: array\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: schemas.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Schema\nlistKind: SchemaList\nplural: schemas\nsingular: schema\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .spec.provider\nname: PROVIDER\ntype: string\n- jsonPath: .spec.version\nname: VERSION\ntype: string\n- jsonPath: .spec.repositories[0].repoURL\nname: URL\ntype: string\n- jsonPath: .spec.repositories[0].ref\nname: REF\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Schema is the Schema for the Schema API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: SchemaSpec defines the desired state of Schema\nproperties:\nprovider:\ndescription: Provider specifies the provider of the schema.\ntype: string\nx-kubernetes-validations:\n- message: provider is immutable\nrule: self == oldSelf\nrepositories:\ndescription: Repositories define the repositories used for building\nthe provider schema\nitems:\nproperties:\ncredentials:\ndescription: Credentials defines the name of the secret that\nholds the credentials to connect to the repo\ntype: string\ndirs:\ndescription: |-\nDirs defines the list of directories that identified the provider schema in src/dst pairs\nrelative within the repository\nitems:\ndescription: |-\nSrcDstPath provide a src/dst pair for the loader to download the schema from a specific src\nin the repository to a given destination in the schema server\nproperties:\ndst:\ndescription: Dst is the relative directory in the schema\nserver\ntype: string\nsrc:\ndescription: Src is the relative directory in the repository\nURL\ntype: string\nrequired:\n- dst\n- src\ntype: object\nmaxItems: 10\ntype: array\nkind:\ndefault: tag\ndescription: Kind defines the that the BranchOrTag string is\na repository branch or a tag\nenum:\n- branch\n- tag\n- hash\ntype: string\nproxy:\ndescription: Proxy defines the HTTP/HTTPS proxy to be used to\nconnect to the repo.\nproperties:\nURL:\ndescription: URL specifies the base URL of the HTTP/HTTPS\nproxy server.\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret\nthat holds the credentials to connect to the proxy server\ntype: string\nrequired:\n- URL\n- credentials\ntype: object\nref:\ndescription: |-\nRef defines the branch or tag of the repository corresponding to the\nprovider schema version\ntype: string\nrepoURL:\ndescription: RepositoryURL specifies the base URL for a given\nrepository\ntype: string\nschema:\ndescription: |-\nSchema provides the details of which files must be used for the models and which files/directories\ncana be excludes\nproperties:\nexcludes:\ndescription: Excludes defines the list of files/directories\nto be excluded\nitems:\ntype: string\nmaxItems: 64\ntype: array\nincludes:\ndescription: Excludes defines the list of files/directories\nto be excluded\nitems:\ntype: string\nmaxItems: 64\ntype: array\nmodels:\ndescription: Models defines the list of files/directories\nto be used as a model\nitems:\ntype: string\nmaxItems: 64\ntype: array\ntype: object\nrequired:\n- kind\n- ref\n- repoURL\n- schema\ntype: object\nmaxItems: 10\nminItems: 1\ntype: array\nversion:\ndescription: Version defines the version of the schema\ntype: string\nx-kubernetes-validations:\n- message: version is immutable\nrule: self == oldSelf\nrequired:\n- provider\n- repositories\n- version\ntype: object\nstatus:\ndescription: SchemaStatus defines the observed state of Schema\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\nrepositories:\ndescription: SchemaRepositoryStatus provides the array of repositories\nitems:\ndescription: SchemaRepositoryStatus provides the observed hash of\na repository\nproperties:\nreference:\ndescription: Reference indicating version of loaded repository\ntype: string\nrepoURL:\ndescription: RepoURL defines URL of the repository\ntype: string\ntype: object\ntype: array\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: discoveryvendorprofiles.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: DiscoveryVendorProfile\nlistKind: DiscoveryVendorProfileList\nplural: discoveryvendorprofiles\nsingular: discoveryvendorprofile\nscope: Namespaced\nversions:\n- name: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: DiscoveryVendorProfile is the Schema for the DiscoveryVendorProfile\nAPI\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: DiscoveryProfileSpec defines the desired state of DiscoveryProfile\nproperties:\ngnmi:\nproperties:\nencoding:\ndefault: JSON_IETF\nenum:\n- UNKNOWN\n- JSON\n- JSON_IETF\n- PROTO\n- ASCII\ntype: string\nx-kubernetes-validations:\n- message: encoding is immutable\nrule: self == oldSelf\nmodelMatch:\ntype: string\norganization:\ntype: string\npaths:\ndescription: Paths        DiscoveryPaths `json:\"paths\" protobuf:\"bytes,3,opt,name=paths\"`\nitems:\nproperties:\nkey:\ndescription: Key defines the key of the path for fast lookup\ntype: string\npath:\ndescription: Path associated with the key\ntype: string\nregex:\ndescription: Regex defines the regex to transform the value\ntype: string\nscript:\ndescription: Script defines the starlark script to transform\nthe value\ntype: string\nrequired:\n- key\n- path\ntype: object\ntype: array\npreserveNamespace:\ndefault: true\ntype: boolean\nx-kubernetes-validations:\n- message: preserveNamespace is immutable\nrule: self == oldSelf\nrequired:\n- organization\n- paths\ntype: object\nrequired:\n- gnmi\ntype: object\ntype: object\nserved: true\nstorage: true\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: targets.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Target\nlistKind: TargetList\nplural: targets\nsingular: target\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .status.conditions[?(@.type=='Ready')].message\nname: REASON\ntype: string\n- jsonPath: .spec.provider\nname: PROVIDER\ntype: string\n- jsonPath: .status.discoveryInfo.version\nname: VERSION\ntype: string\n- jsonPath: .spec.address\nname: ADDRESS\ntype: string\n- jsonPath: .status.discoveryInfo.platform\nname: PLATFORM\ntype: string\n- jsonPath: .status.discoveryInfo.serialNumber\nname: SERIALNUMBER\ntype: string\n- jsonPath: .status.discoveryInfo.macAddress\nname: MACADDRESS\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Target is the Schema for the Target API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetSpec defines the desired state of Target\nproperties:\naddress:\ndescription: Address defines the address to connect to the target\ntype: string\nconnectionProfile:\ndescription: ConnectionProfile define the profile used to connect\nto the target once discovered\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the target\ntype: string\nprovider:\ndescription: Provider specifies the provider using this target.\ntype: string\nsyncProfile:\ndescription: SyncProfile define the profile used to sync to the target\nconfig once discovered\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to connect\nto the target if mtls is used\ntype: string\nrequired:\n- address\n- connectionProfile\n- credentials\n- provider\ntype: object\nstatus:\ndescription: TargetStatus defines the observed state of Target\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\ndiscoveryInfo:\ndescription: Discovery info defines the information retrieved during\ndiscovery\nproperties:\nhostname:\ndescription: HostName associated with the target\ntype: string\nmacAddress:\ndescription: MacAddress associated with the target\ntype: string\nplatform:\ndescription: Platform associated with the target\ntype: string\nprotocol:\ndescription: Protocol used for discovery\ntype: string\nprovider:\ndescription: Type associated with the target\ntype: string\nserialNumber:\ndescription: SerialNumber associated with the target\ntype: string\nsupportedEncodings:\ndescription: Supported Encodings of the target\nitems:\ntype: string\ntype: array\nversion:\ndescription: Version associated with the target\ntype: string\ntype: object\nusedReferences:\ndescription: UsedReferences track the resource used to reconcile the\ncr\nproperties:\nconnectionProfileResourceVersion:\ntype: string\nsecretResourceVersion:\ntype: string\nsyncProfileResourceVersion:\ntype: string\ntlsSecretResourceVersion:\ntype: string\nrequired:\n- connectionProfileResourceVersion\n- syncProfileResourceVersion\ntype: object\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: targetconnectionprofiles.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: TargetConnectionProfile\nlistKind: TargetConnectionProfileList\nplural: targetconnectionprofiles\nsingular: targetconnectionprofile\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .spec.protocol\nname: PROTOCOL\ntype: string\n- jsonPath: .spec.port\nname: PORT\ntype: string\n- jsonPath: .spec.encoding\nname: ENCODING\ntype: string\n- jsonPath: .spec.insecure\nname: INSECURE\ntype: string\n- jsonPath: .spec.skipVerify\nname: SKIPVERIFY\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: TargetConnectionProfile is the Schema for the TargetConnectionProfile\nAPI\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetConnectionProfileSpec defines the desired state of\nTargetConnectionProfile\nproperties:\ncommitCandidate:\ndefault: candidate\nenum:\n- candidate\n- running\ntype: string\nx-kubernetes-validations:\n- message: UseOperationRemove is immutable\nrule: self == oldSelf\nconnectRetry:\ndefault: 10s\ntype: string\nx-kubernetes-validations:\n- message: connectRetry is immutable\nrule: self == oldSelf\nencoding:\nenum:\n- UNKNOWN\n- JSON\n- JSON_IETF\n- PROTO\ntype: string\nx-kubernetes-validations:\n- message: encoding is immutable\nrule: self == oldSelf\nincludeNS:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: includeNS is immutable\nrule: self == oldSelf\ninsecure:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: insecure is immutable\nrule: self == oldSelf\noperationWithNS:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: operationWithNS is immutable\nrule: self == oldSelf\nport:\ndefault: 57400\ndescription: Port defines the port on which the scan runs\nformat: int32\ntype: integer\nx-kubernetes-validations:\n- message: port is immutable\nrule: self == oldSelf\npreferredNetconfVersion:\ndefault: \"1.0\"\nenum:\n- \"1.0\"\n- \"1.1\"\ntype: string\nx-kubernetes-validations:\n- message: preferredNetconfVersion is immutable\nrule: self == oldSelf\nprotocol:\ndefault: gnmi\nenum:\n- unknown\n- gnmi\n- netconf\n- noop\ntype: string\nx-kubernetes-validations:\n- message: protocol is immutable\nrule: self == oldSelf\nskipVerify:\ndefault: true\ntype: boolean\nx-kubernetes-validations:\n- message: skipVerify is immutable\nrule: self == oldSelf\ntimeout:\ndefault: 10s\ntype: string\nx-kubernetes-validations:\n- message: timeout is immutable\nrule: self == oldSelf\nuseOperationRemove:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: UseOperationRemove is immutable\nrule: self == oldSelf\nrequired:\n- port\n- protocol\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.15.0\nname: discoveryrules.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: DiscoveryRule\nlistKind: DiscoveryRuleList\nplural: discoveryrules\nsingular: discoveryrule\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: DiscoveryRule is the Schema for the DiscoveryRule API\nproperties:\napiVersion:\ndescription: |-\nAPIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\ntype: string\nkind:\ndescription: |-\nKind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: DiscoveryRuleSpec defines the desired state of DiscoveryRule\nproperties:\naddresses:\ndescription: IP Prefixes for which this discovery rule applies\nitems:\nproperties:\naddress:\ndescription: Address (specified as IP or DNS name) of the target/target(s)\ntype: string\nhostName:\ndescription: HostName of the ip prefix; used for /32 or /128\naddresses with discovery disabled\ntype: string\nrequired:\n- address\ntype: object\ntype: array\nconcurrentScans:\ndescription: number of concurrent IP scan\nformat: int64\ntype: integer\ndefaultSchema:\ndescription: |-\nDefaultSchema define the default schema used to connect to a target\nIndicates that discovery is disable; cannot be used for prefix based discovery rules\nproperties:\nprovider:\ndescription: Provider specifies the provider of the schema.\ntype: string\nversion:\ndescription: Version defines the version of the schema\ntype: string\nrequired:\n- provider\n- version\ntype: object\ndiscoveryProfile:\ndescription: DiscoveryProfile define the profiles the discovery controller\nuses to discover targets\nproperties:\nconnectionProfiles:\ndescription: |-\nConnectionProfiles define the list of profiles the discovery controller uses to discover the target.\nThe order in which they are specified is the order in which discovery is executed.\nitems:\ntype: string\ntype: array\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the target\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to connect\nto the target if mtls is used\ntype: string\nrequired:\n- connectionProfiles\n- credentials\ntype: object\nperiod:\ndescription: Period defines the wait period between discovery rule\nruns\ntype: string\npodSelector:\ndescription: PodSelector defines the pod selector for which this discovery\nrule applies\nproperties:\nmatchExpressions:\ndescription: matchExpressions is a list of label selector requirements.\nThe requirements are ANDed.\nitems:\ndescription: |-\nA label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.\nproperties:\nkey:\ndescription: key is the label key that the selector applies\nto.\ntype: string\noperator:\ndescription: |-\noperator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.\ntype: string\nvalues:\ndescription: |-\nvalues is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\nitems:\ntype: string\ntype: array\nx-kubernetes-list-type: atomic\nrequired:\n- key\n- operator\ntype: object\ntype: array\nx-kubernetes-list-type: atomic\nmatchLabels:\nadditionalProperties:\ntype: string\ndescription: |-\nmatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\ntype: object\ntype: object\nx-kubernetes-map-type: atomic\nprefixes:\ndescription: IP Prefixes for which this discovery rule applies\nitems:\nproperties:\nexcludes:\ndescription: IP Prefixes to be excluded\nitems:\ntype: string\ntype: array\nprefix:\ndescription: Prefix of the target/target(s)\ntype: string\nrequired:\n- prefix\ntype: object\ntype: array\nserviceDomain:\ndescription: |-\nServiceDomain defines the service domain of the cluster, used by svc discovery to identify the\ndomain name in the k8s cluster where the service reside.\ntype: string\nserviceSelector:\ndescription: ServiceSelector defines the service selector for which\nthis discovery rule applies\nproperties:\nmatchExpressions:\ndescription: matchExpressions is a list of label selector requirements.\nThe requirements are ANDed.\nitems:\ndescription: |-\nA label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.\nproperties:\nkey:\ndescription: key is the label key that the selector applies\nto.\ntype: string\noperator:\ndescription: |-\noperator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.\ntype: string\nvalues:\ndescription: |-\nvalues is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\nitems:\ntype: string\ntype: array\nx-kubernetes-list-type: atomic\nrequired:\n- key\n- operator\ntype: object\ntype: array\nx-kubernetes-list-type: atomic\nmatchLabels:\nadditionalProperties:\ntype: string\ndescription: |-\nmatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\ntype: object\ntype: object\nx-kubernetes-map-type: atomic\ntargetConnectionProfiles:\ndescription: |-\nTargetConnectionProfiles define the profile the discovery controller uses to create targets\nonce discovered\nitems:\nproperties:\nconnectionProfile:\ndescription: ConnectionProfile define the profile used to connect\nto the target once discovered\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that\nholds the credentials to connect to the target\ntype: string\nsyncProfile:\ndescription: SyncProfile define the profile used to sync to\nthe target config once discovered\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to\nconnect to the target if mtls is used\ntype: string\nrequired:\n- connectionProfile\n- credentials\ntype: object\ntype: array\ntargetTemplate:\ndescription: TargetTemplate defines the template the discovery controller\nuses to create the targets as a result of the discovery\nproperties:\nannotations:\nadditionalProperties:\ntype: string\ndescription: Annotations is a key value map to be copied to the\ntarget CR.\ntype: object\nlabels:\nadditionalProperties:\ntype: string\ndescription: Labels is a key value map to be copied to the target\nCR.\ntype: object\nnameTemplate:\ndescription: target name template\ntype: string\nx-kubernetes-validations:\n- message: nameTemplate is immutable\nrule: self == oldSelf\ntype: object\nrequired:\n- targetConnectionProfiles\ntype: object\nstatus:\ndescription: DiscoveryRuleStatus defines the observed state of DiscoveryRule\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: |-\nlastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: |-\nmessage is a human readable message indicating details about the transition.\nThis may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: |-\nobservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: |-\nreason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: |-\ntype of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nx-kubernetes-list-map-keys:\n- type\nx-kubernetes-list-type: map\nstartTime:\ndescription: StartTime identifies when the dr got started\nformat: date-time\ntype: string\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiregistration.k8s.io/v1\nkind: APIService\nmetadata:\nname: v1alpha1.config.sdcio.dev\nspec:\ngroup: config.sdcio.dev\ngroupPriorityMinimum: 1000\ninsecureSkipTLSVerify: true\nservice:\nname: config-server\nnamespace: network-system\nport: 6443\nversion: v1alpha1\nversionPriority: 15\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: config-server\nnamespace: network-system\nspec:\nreplicas: 1\nselector:\nmatchLabels:\napp.kubernetes.io/name: config-server\nstrategy:\ntype: Recreate\ntemplate:\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nsdcio.dev/data-server: \"true\"\nspec:\ncontainers:\n- args:\n- --tls-cert-file=/apiserver.local.config/certificates/tls.crt\n- --tls-private-key-file=/apiserver.local.config/certificates/tls.key\n- --audit-log-path=-\n- --audit-log-maxage=0\n- --audit-log-maxbackup=0\n- --secure-port=6443\ncommand:\n- /app/config-server\nenv:\n- name: POD_IP\nvalueFrom:\nfieldRef:\nfieldPath: status.podIP\n- name: POD_NAMESPACE\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: metadata.namespace\n- name: NODE_NAME\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: spec.nodeName\n- name: NODE_IP\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: status.hostIP\n- name: PPROF_PORT\nvalue: \"8081\"\n- name: REVERTIVE\nvalue: \"true\"\n- name: ENABLE_SUBSCRIPTION\nvalue: \"true\"\n- name: ENABLE_TARGET\nvalue: \"true\"\n- name: ENABLE_TARGETDATASTORE\nvalue: \"true\"\n- name: ENABLE_TARGETCONFIGSERVER\nvalue: \"true\"\n- name: ENABLE_TARGETRECOVERYSERVER\nvalue: \"true\"\n- name: ENABLE_DISCOVERYRULE\nvalue: \"true\"\n- name: ENABLE_SCHEMA\nvalue: \"true\"\n- name: ENABLE_CONFIGSET\nvalue: \"true\"\n- name: ENABLE_WORKSPACE\nvalue: \"true\"\n- name: ENABLE_ROLLOUT\nvalue: \"true\"\nimage: ghcr.io/sdcio/config-server:v0.0.54\nimagePullPolicy: Always\nname: config-server\nports:\n- containerPort: 6443\nname: api-service\nvolumeMounts:\n- mountPath: /apiserver.local.config/certificates\nname: apiserver-certs\nreadOnly: true\n- mountPath: /config\nname: config-store\n- mountPath: /schemas\nname: schema-store\n- mountPath: /workspace\nname: workspace-store\n- args:\n- --config=/config/data-server.yaml\ncommand:\n- /app/data-server\nimage: ghcr.io/sdcio/data-server:v0.0.64\nimagePullPolicy: Always\nname: data-server\nports:\n- containerPort: 56000\nname: data-service\nvolumeMounts:\n- mountPath: /config\nname: data-server-config\n- mountPath: /cached/caches\nname: cache\n- mountPath: /schemas\nname: schema-store\n- mountPath: /schemadb\nname: schema-db\nsecurityContext:\nfsGroup: 10000\nrunAsGroup: 10000\nrunAsUser: 10000\nserviceAccountName: config-server\nvolumes:\n- configMap:\nname: data-server\nname: data-server-config\n- name: apiserver-certs\nsecret:\nsecretName: config-server-cert\n- emptyDir:\nsizeLimit: 10Gi\nname: cache\n- name: config-store\npersistentVolumeClaim:\nclaimName: pvc-config-store\n- name: schema-store\npersistentVolumeClaim:\nclaimName: pvc-schema-store\n- name: schema-db\npersistentVolumeClaim:\nclaimName: pvc-schema-db\n- name: workspace-store\npersistentVolumeClaim:\nclaimName: pvc-workspace-store\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\nname: allow-metrics-traffic\nnamespace: network-system\nspec:\ningress:\n- from:\n- namespaceSelector:\nmatchLabels:\nkubernetes.io/metadata.name: monitoring\nports:\n- port: 8443\nprotocol: TCP\n- from:\n- podSelector: {}\npodSelector:\nmatchLabels:\napp.kubernetes.io/name: config-server\npolicyTypes:\n- Ingress\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: allow-traffic-to-apiserver-extension\nnamespace: network-system\nspec:\ningress:\n- from:\n- ipBlock:\ncidr: 0.0.0.0/0\nports:\n- port: api-service\nprotocol: TCP\npodSelector:\nmatchLabels:\napp.kubernetes.io/name: config-server\npolicyTypes:\n- Ingress\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\nname: config-server-clusterrole\nrules:\n- apiGroups:\n- \"\"\nresources:\n- namespaces\n- secrets\n- services\n- pods\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- \"\"\nresources:\n- events\nverbs:\n- create\n- patch\n- apiGroups:\n- admissionregistration.k8s.io\nresources:\n- mutatingwebhookconfigurations\n- validatingwebhookconfigurations\n- validatingadmissionpolicies\n- validatingadmissionpolicybindings\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- flowcontrol.apiserver.k8s.io\nresources:\n- flowschemas\n- prioritylevelconfigurations\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- config.sdcio.dev\nresources:\n- configs\n- configs/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- config.sdcio.dev\nresources:\n- configsets\n- configsets/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- config.sdcio.dev\nresources:\n- deviations\n- deviations/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- targets\n- targets/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- targetconnectionprofiles\n- targetsyncprofiles\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- discoveryrules\n- discoveryrules/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- discoveryvendorprofiles\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- schemas\n- schemas/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- subscriptions\n- subscriptions/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- workspaces\n- workspaces/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- rollouts\n- rollouts/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- coordination.k8s.io\nresources:\n- leases\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\nname: config-server-metrics-auth-role\nrules:\n- apiGroups:\n- authentication.k8s.io\nresources:\n- tokenreviews\nverbs:\n- create\n- apiGroups:\n- subjectaccessreviews.k8s.io\nresources:\n- tokenreviews\nverbs:\n- create\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\nname: config-server-metrics-reader\nrules:\n- nonResourceURLs:\n- /metrics\nverbs:\n- get\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: config-server-clusterrolebinding\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: config-server-clusterrole\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: config-server-metrics-auth-rolebinding\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: config-server-metrics-auth-role\nsubjects:\n- kind: ServiceAccount\nname: controller-manager\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: config:system:auth-delegator\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\nname: aggregated-apiserver-role\nnamespace: network-system\nrules:\n- apiGroups:\n- \"\"\nresources:\n- serviceaccounts\nverbs:\n- get\n- apiGroups:\n- \"\"\nresources:\n- serviceaccounts/token\nverbs:\n- create\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\nname: config-auth-reader\nnamespace: kube-system\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: Role\nname: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: v1\ndata:\ndata-server.yaml: \"grpc-server:\\n  schema-server:\\n    enabled: true\\n    schemas-directory:\n./schemas\\n\\n  data-server:\\n    max-candidates: 16\\n\\n  max-recv-msg-size: 25165824\n# 24 * 1024 * 1024 (24MB)\\n\\ndatastores: # this specifies MAIN datastores\\n\\nschema-store:\\n\n\\ # type is either memory or persistent (default)\\n  type: persistent\\n  path:\n\\\"/schemadb\\\"\\n\\ncache: \\n  type: local\\n  store-type: badgerdb\\n  dir: \\\"/cached/caches\\\"\\n\\nprometheus:\\n\n\\ address: \\\":56090\\\"\"\nkind: ConfigMap\nmetadata:\nname: data-server\nnamespace: network-system\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-config-store\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-schema-db\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-schema-store\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-workspace-store\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\n---\napiVersion: v1\ndata:\ntls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZekNDQWt1Z0F3SUJBZ0lJSC9mSFZHenZ3cnN3RFFZSktvWklodmNOQVFFTEJRQXdaVEVMTUFrR0ExVUUKQmhNQ2RXNHhDekFKQmdOVkJBZ01Bbk4wTVFvd0NBWURWUVFIREFGc01Rb3dDQVlEVlFRS0RBRnZNUXN3Q1FZRApWUVFMREFKdmRURWtNQ0lHQTFVRUF3d2JZbUZ6YVdNdFkyVnlkR2xtYVdOaGRHVXRZWFYwYUc5eWFYUjVNQjRYCkRUSXlNRE16TVRBNU1UYzFNMW9YRFRNeU1ETXlPREE1TVRjMU5Gb3dIREVhTUJnR0ExVUVBeE1SWW1GemFXTXUKWkdWbVlYVnNkQzV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUN0TUt0eApjc3Rjdk8rdDVMazZRQkRBZ3g1akZCL2F1dStVb3BDR2Z6VitaRW5obldpaC8xMVZ2ek44cjhmdGZuUkZGTVZ6CmJqYlVhSXNDOFc1eGJDNXNpc2VrdnVBWDlpanUzMlFybEU0RTR1UzNYREdVZkhGSFhMcWxBRU9RclUvRzQ0RGgKa0I3ajJOcDRzbk9IckF0aDA3TStvbXBmVklhSTlkQmdYY3hsUE5QRkNNamlOb1VweVM4eXNha3RQRXFjZTBpawpmNDBYVERmN1YwekFFelI0QkE4Yzh0b05UMVNnSXFIV0xueERKcnZRempDaTVFN2NMNkpmTmhlZDQ5MUVNWlEwCmVnbkV5bXd6d1Jya3BYTkZ4RHJzSXpOZmhHelB6RGJLdmFIUHh5NUwvM3h3clZ3VHllbklaOVExK0tjemtCSksKRXZIaVVKL1BML0VYZkloakFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVQpCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3TFFZRFZSMFJCQ1l3SklJSmJHOWpZV3hvYjNOMGdoRmlZWE5wCll5NWtaV1poZFd4MExuTjJZNGNFZndBQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFEa1hsbGZMTlpzWDEKYmp1b0h4RXVUWitaODlMWUxPUDBMM0dHMFgwdVdkZzJFcXY1bmZNRHVRVmJIRmt5dVo3ZDlDY01QYk12MTdDWgoxZGwwQk1GQTJkTkJzK3V1UXFIUFh3RkI4SFdPSDhBc1pMMnYvbG91T3g2dU1QQk9uWUhuQ3pFY21FQXZoR2dLCkpXMDNkd2QwNlJPeUdLT29qSklFTlRnd0xnQ1dZSytPWmIzQklyMUJqS012Q2dHN3pJVDFUUVNna3hGN1NGNzUKYk5BaEdOa0NWMGVrSnNXQWk1UGhzVS9IdWthdGVHUGNMS3hia0RGdHpSV2tRNmdKUXhkZmVuOVBKTjVJVCt4RQpFci8wYUkrOFM5Y1FPUnk0VTNDSFRodmlnOGFyZ3FucmFWMU92OXZNTWxzZ3pnYXc3SjdaeGtkWWwrSkMyWUcvCjJrUThVd1IzQnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\ntls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBclRDcmNYTExYTHp2cmVTNU9rQVF3SU1lWXhRZjJycnZsS0tRaG44MWZtUko0WjFvCm9mOWRWYjh6ZksvSDdYNTBSUlRGYzI0MjFHaUxBdkZ1Y1d3dWJJckhwTDdnRi9Zbzd0OWtLNVJPQk9Ma3Qxd3gKbEh4eFIxeTZwUUJEa0sxUHh1T0E0WkFlNDlqYWVMSnpoNndMWWRPelBxSnFYMVNHaVBYUVlGM01aVHpUeFFqSQo0amFGS2Nrdk1yR3BMVHhLbkh0SXBIK05GMHczKzFkTXdCTTBlQVFQSFBMYURVOVVvQ0toMWk1OFF5YTcwTTR3Cm91Uk8zQytpWHpZWG5lUGRSREdVTkhvSnhNcHNNOEVhNUtWelJjUTY3Q016WDRSc3o4dzJ5cjJoejhjdVMvOTgKY0sxY0U4bnB5R2ZVTmZpbk01QVNTaEx4NGxDZnp5L3hGM3lJWXdJREFRQUJBb0lCQUJWWU16ajNLZU1URWdMLwpkbWljYnJRYk5NcUhOMm5Rc2loQ1pNZCt0QXdRdGg1Tk5SRUtGT20xZDlYOUlBbkFGUHBTbGdjazVUTUdjMk40CmQrRVlzUndGZXBkdVF0WVJLM2hOSmQ1TkY5UjRWakhXOWZGVDZPNGZtbzB0WENaZmhiNkFXV2p6Unl0VGxaRmMKaE9xS3BKaDQ2OVZqVlBMTXl3dmtKN3RJdENFaHl4b0t0VVhwcm45SXBLNnNUa051OTFmMVA4czJNbDd1RlVqYwpJdGhMb3JnMEYyU3RaeEJmVDJGaFRYaFZxRlRJS1pmazFGbnRpbUwyWlQrRXZzQlpnZHYwa2Z1Q2hFdE5jRW1PCnRZc2dKT3ExTWF5M2d0dlk3VDB6WkRtTTIrOVpKQ0JLcm8yV2IxdGw0RHNnaWNkR0I2SlhnTi81aklSMTNmbDUKMTRJd1hza0NnWUVBemtQb1MrTko0QkJkR3RYem5tZWVhRFFQVVU0dkF1R3YyU2VtajR3RG1KRXB6aDdoMWlQZAprVWxmYjcxZ1VMbmk0SDVkVFlyVFpwOElUaXZvM3A1bUNrV3lFV09wMmx4VUZoM3JnVWN6NWt0RUhkejl1bjNoCnFYNVJpTWlkM0Y3dWRIODdqYTdJVi9mUEFGSnlremQrWHNaZGFuT0tPK1UvV0t2ek0rSFEzUThDZ1lFQTF2TWoKdml3dnFxM0FBa0VpN2RlOUxLUE1uS1N5VE9BdHQzS2dqV1RLNU5aQUdqeWpoSGxEbjRCempSS25DWk8xY0lJZwo0Wnl1VzQrUlB5aGQreEFubzVoMVh0Ny9LYzNFaW1ucjBLU0ZmRWVza2NORFIyVHNTdCtjYTl6aFFPTFJ0TWRCCnE5OWZDeFprK1pmcEhpSzJCK0pHVExNdVJRY0tDYU43RldKTkIyMENnWUJhc2k5bGx3WjMySm9uMzZYa3BDbGEKSm5JSnpUZ01xMUlZU1VBSzVJVDhRL0ErNndOZ2xwcXBkTHJiTmtrd2xkdjEzSHFJU3gvVGd1QXpCMG01QWF0YQpudlRDZ3JGQUM5TUplcFNBWHQrcVJyUW44WEU3M0hncWdCbTM3SWJGVEpUTGN0cXIzUXZJNm5VQjdqN2xEc1NwClJjM3pyZVE5bS9yenNZQVo4eFJVN3dLQmdRQ0JYTjg4Q3JlOVRzaHFFdTJFbXZ4ZEswOXZUcWVJSUxzaTFyZk4Kb01XREozWjQwOW5OVm5YZVBwNU1YdGRzcWhyZVZWS1l0WVV4MFp1bW1STEdrSmhxbXN5NGhoaW0vaEcxQTc1SwpXVm1FekZZTmU2aTRCUU00cEk4dFUwZTFsMHlDTWhGUjhTTHdOMUFaN3RUN3NBUkJobXFzcW9IRVJWSkRMc0phCndraDltUUtCZ0NYR2xoZzY4aVMzMldmSWVtYUFRMTJpNFRUUk1FNWppTFl0ZlkyREJTMDBWV3NxY0l1OEFUWm0KVHVoZHBRVG9mKzE3LzFyU0cyYnFaWFA2L0h3ak14OTVIdWlXbjVKSjA3RTduOUVCUDlkQTY0K0lHdWlvd0h5RAo2a3g3VVhuTUtTYXdiV2JxZ1JGZTFOZEdLbkh0ZE5GOGxndEdjdytxUTk3YkIreXFreXMxCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nkind: Secret\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: config-server-cert\nnamespace: network-system\ntype: kubernetes.io/tls\n---\napiVersion: v1\nkind: Secret\nmetadata:\nannotations:\nkubernetes.io/service-account.name: config-server\nname: config-server-token\nnamespace: network-system\ntype: kubernetes.io/service-account-token\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: config-server-metrics\nnamespace: network-system\nspec:\nports:\n- name: metrics\nport: 8443\nprotocol: TCP\ntargetPort: 8443\nselector:\napp.kubernetes.io/name: config-server\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: config-server-target-metrics\nnamespace: network-system\nspec:\nports:\n- name: targetmetrics\nport: 9443\nprotocol: TCP\ntargetPort: 9443\nselector:\napp.kubernetes.io/name: config-server\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: config-server\nnamespace: network-system\nspec:\nports:\n- name: api-service\nport: 6443\ntargetPort: api-service\nselector:\napp.kubernetes.io/name: config-server\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\napp.kubernetes.io/name: config-server\nname: data-server\nnamespace: network-system\nspec:\nports:\n- name: data-service\nport: 56000\nprotocol: TCP\ntargetPort: data-service\nselector:\nsdcio.dev/data-server: \"true\"\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\nname: config-server\nnamespace: network-system\n</code></pre> <p>if successful you should see a running container similar to this</p> <pre><code>kubectl get pods -n network-system\n</code></pre> <p>output</p> <pre><code>NAME                             READY   STATUS    RESTARTS   AGE\nconfig-server-7fcd95b976-p2pn7   2/2     Running   0          3d5h\n</code></pre>"},{"location":"install/4_k8s_distributed/","title":"Kubernetes-distributed","text":"<p>First ensure the pre-requisites are met</p>"},{"location":"install/4_k8s_distributed/#install-sdc-components","title":"Install SDC Components","text":"<p>Under construction</p>"},{"location":"monitoring/0_about/","title":"Monitoring","text":"<p>Since v0.0.42 the config-server exposes the controller runtime metrics to observe the behavior of the system. </p>"},{"location":"monitoring/1_prometheus_operator/","title":"Monitoring using Prometheus Operator","text":"<p>You can install the Prometheus Operator in the Kubernetes Cluster, configure it to scrape an endpoint. In this guide we walk through the steps to configure the Prometheus Operator for scraping metrics from the config-server.</p> <p>this guide is not a production deployment guide but rather a guide to help you to get started in the lab</p>"},{"location":"monitoring/1_prometheus_operator/#install-the-prometheus-operator","title":"Install the Prometheus Operator","text":"<p>Install Prometheus Operator into the Kubernetes Cluster. This includes all of Prometheus Operator\u2019s Kubernetes custom resource definitions (CRDs) that define the Prometheus, and ServiceMonitor abstractions used to configure the monitoring stack.</p> <p>this instruction deploys the Prometheus Operator in the default namespace. To install in another namespace refer to Prometheus Operator</p> <p>Install the Operator using the <code>bundle.yaml</code> file in the Prometheus Operator GitHub repository:</p> <pre><code>kubectl create -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/master/bundle.yaml\n</code></pre> <p>You should see the following output:</p> <pre><code>customresourcedefinition.apiextensions.k8s.io/alertmanagerconfigs.monitoring.coreos.com created\ncustomresourcedefinition.apiextensions.k8s.io/alertmanagers.monitoring.coreos.com created\ncustomresourcedefinition.apiextensions.k8s.io/podmonitors.monitoring.coreos.com created\ncustomresourcedefinition.apiextensions.k8s.io/probes.monitoring.coreos.com created\ncustomresourcedefinition.apiextensions.k8s.io/prometheuses.monitoring.coreos.com created\ncustomresourcedefinition.apiextensions.k8s.io/prometheusrules.monitoring.coreos.com created\ncustomresourcedefinition.apiextensions.k8s.io/servicemonitors.monitoring.coreos.com created\ncustomresourcedefinition.apiextensions.k8s.io/thanosrulers.monitoring.coreos.com created\nclusterrolebinding.rbac.authorization.k8s.io/prometheus-operator created\nclusterrole.rbac.authorization.k8s.io/prometheus-operator created\ndeployment.apps/prometheus-operator created\nserviceaccount/prometheus-operator created\nservice/prometheus-operator created\n</code></pre> <p>Verify that the installation succeeded:</p> <pre><code>kubectl get deploy\n</code></pre> <pre><code>NAME                  READY   UP-TO-DATE   AVAILABLE   AGE\nprometheus-operator   1/1     1            1           31m\n</code></pre>"},{"location":"monitoring/1_prometheus_operator/#configure-the-prometheus-operator","title":"Configure the Prometheus Operator","text":"<p>Create a monitoring namespace:</p> <pre><code>kubectl create ns monitoring\n</code></pre> <p>Create RBAC permissions:</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: prometheus\n  namespace: monitoring\nEOF\n</code></pre> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: prometheus\nrules:\n- apiGroups: [\"\"]\n  resources:\n  - nodes\n  - nodes/metrics\n  - services\n  - endpoints\n  - pods\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"\"]\n  resources:\n  - configmaps\n  verbs: [\"get\"]\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - ingresses\n  verbs: [\"get\", \"list\", \"watch\"]\n- nonResourceURLs: [\"/metrics\"]\n  verbs: [\"get\"]\nEOF\n</code></pre> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: prometheus\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: prometheus\nsubjects:\n- kind: ServiceAccount\n  name: prometheus\n  namespace: monitoring\nEOF\n</code></pre> <p>Deploy Prometheus:</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: monitoring.coreos.com/v1\nkind: Prometheus\nmetadata:\n  name: prometheus\n  namespace: monitoring\n  labels:\n    app: prometheus\nspec:\n  image: quay.io/prometheus/prometheus:v2.22.1\n  nodeSelector:\n    kubernetes.io/os: linux\n  replicas: 2\n  resources:\n    requests:\n      memory: 400Mi\n  securityContext:\n    fsGroup: 2000\n    runAsNonRoot: true\n    runAsUser: 1000\n  serviceAccountName: prometheus\n  version: v2.22.1\n  serviceMonitorSelector: {}\n  serviceMonitorNamespaceSelector: {}\nEOF\n</code></pre> <p>Verify Prometheus is running:</p> <pre><code>kubectl get statefulsets.apps -n monitoring </code></pre> <pre><code>NAME                    READY   AGE\nprometheus-prometheus   2/2     30m\n</code></pre>"},{"location":"monitoring/1_prometheus_operator/#deploy-the-config-server-service-monitor","title":"Deploy the config-server service monitor","text":"<p>Configure the service monitor that enables Prometheus to scrape metrics from the config-server:</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    app.kubernetes.io/name: config-server\n  name: config-server-metrics-monitor\n  namespace: network-system\nspec:\n  endpoints:\n    - interval: 30s\n      path: /metrics\n      port: metrics # Ensure this is the name of the port that exposes HTTPS metrics\n      scheme: https\n      # bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token\n      tlsConfig:\n        # TODO(user): The option insecureSkipVerify: true is not recommended for production since it disables\n        # certificate verification. This poses a significant security risk by making the system vulnerable to\n        # man-in-the-middle attacks, where an attacker could intercept and manipulate the communication between\n        # Prometheus and the monitored services. This could lead to unauthorized access to sensitive metrics data,\n        # compromising the integrity and confidentiality of the information.\n        # Please use the following options for secure configurations:\n        # caFile: /etc/metrics-certs/ca.crt\n        # certFile: /etc/metrics-certs/tls.crt\n        # keyFile: /etc/metrics-certs/tls.key\n        insecureSkipVerify: true\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: config-server\n      app: prometheus\nEOF\n</code></pre> <p>To verify the scraping works, login to the Prometheus web service. We expose the Prometheus server using port forwarding.</p> <pre><code>kubectl --namespace monitoring port-forward svc/prometheus-operated 9090\n</code></pre> <p>Navigate to http://localhost:9090 to access the Prometheus interface:</p> <p>Click on Status, then Targets to see any configured scrape targets.</p> <p></p> <p>Navigate to Graph to test metrics collection:</p> <p></p> <p>In the Expression box, type <code>controller_runtime_reconcile_total</code>, and press ENTER.</p>"},{"location":"monitoring/1_prometheus_operator/#troubleshooting","title":"Troubleshooting","text":"<p>In case of trouble here is a link to the troubleshooting-guide</p>"},{"location":"system-architecture/config-server/","title":"Config server system architecture","text":"<p>The config-server comprises 6 essential components:</p> <ul> <li><code>Schema Reconciler</code>: Manages the lifecycle of a <code>yang</code> schema via the <code>schema</code> Custom Resource Definition (CRD).</li> <li><code>DiscoveryRule Reconciler</code>: Oversees the lifecycle of the <code>discoveryRule</code> CRD.</li> <li><code>TargetDatastore Reconciler</code>: Controls the lifecycle of the <code>datastore</code> within the data-server.</li> <li><code>TargetConfigServer Reconciler</code>: Orchestrates the lifecycle of the <code>config</code> KRM resource in response to target state changes.</li> <li><code>TargetConfigSet Server Reconciler</code>: Orchestrates the lifecycle of the <code>configSet</code> KRM resource in response to target state changes.</li> <li><code>Config Server</code>: Coordinates the lifecycle of the <code>config</code> and <code>configSet</code> KRM resources in the data-server</li> </ul>"},{"location":"system-architecture/config-server/#schema-reconciler","title":"Schema Reconciler","text":"<p>The Schema Reconciler is tasked with managing <code>yang</code> schemas in the schema-server through the <code>schema</code> CRD. This reconciler handles the addition and deletion of <code>yang</code> schemas. Notably, the schema CRD remains immutable to simplify updates. It assumes that yang schemas are validated offline before integration into the system. Upon adding a <code>schema</code> CR, the reconciler downloads the referenced git repository, extracts the referenced Schema files and loads the Schema into the schema-server. Deleting a schema CR results in the deletion of the corresponding schema from the schema-server. The reconciler employs the <code>READY</code> condition to signal the reconciliation status of the <code>schema</code> CR.</p>"},{"location":"system-architecture/config-server/#discovery-reconciler","title":"Discovery Reconciler","text":"<p>The Discovery Reconciler is responsible for managing the lifecycle of the <code>discoveryRule</code> CRD. It monitors the availability and alterations of referenced profiles in the <code>discoveryRule</code> CR. Additionally, it initiates or halts a discovery goroutine for each <code>discoveryRule</code> CR, regardless of whether discovery is <code>enabled</code> or <code>disabled</code>. Based on the discovery outcomes, it manages the lifecycle of the respective <code>target</code> CR. A successful discovery results in the creation of a <code>target</code> CR with a <code>READY</code> condition set to <code>True</code>.</p>"},{"location":"system-architecture/config-server/#targetdatastore-reconciler","title":"TargetDatastore Reconciler","text":"<p>The TargetDatastore Reconciler oversees the lifecycle of the datastore of a target within the <code>Data-Server</code>. It creates or deletes a datastore in the <code>Data-Server</code> based on updates to the <code>target</code> CR or changes in the target state within the datastore. Its status is reflected in the <code>DATASTORE</code> condition (<code>DSReady</code> in yaml / json) of the <code>target</code> CR and should be <code>READY</code> in case of normal operation.</p>"},{"location":"system-architecture/config-server/#targetconfigserver-reconciler","title":"TargetConfigServer Reconciler","text":"<p>The TargetConfigServer Reconciler manages the lifecycle of the <code>config</code> KRM resources based on <code>target</code> transitions. To ensure consistent results when a target transitions from <code>NotReady</code> to <code>Ready</code>, it reapplies the original configurations before handling new ones. Consequently, the reconciler reapplies previously applied configs, and upon successful completion, declares the <code>CONFIG</code> condition (<code>ConfigReady</code> in json / yaml output) state with reason <code>Ready</code> as <code>True</code> in the <code>target</code> CR .</p>"},{"location":"system-architecture/config-server/#targetconfigsetserver-reconciler","title":"TargetConfigSetServer Reconciler","text":"<p>The TargetConfigSetServer Reconciler oversees the lifecycle of the <code>configSet</code> KRM resources based on <code>target</code> transitions. It updates the status of the <code>configSet</code> KRM resource when a <code>target</code> CR changes state.</p>"},{"location":"system-architecture/config-server/#config-resources","title":"Config Resources","text":"<p>The Config resources are implemented as an aggregated API server, as Config resources may exceed the constraints of the etcd storage limits. It manages the <code>config</code> and <code>configSet</code> KRM resources based on the <code>target</code> <code>READY</code> conditions and communicates with the data-server through the intent RPC(s).</p>"},{"location":"user-guide/deviation/","title":"Deviation","text":"<p>A deviation is a report indicating differences between the actual device or system configuration and the configuration specified in one or more Config CRs managed by SDCIO.</p> <p>There are three types of deviations:</p> <ol> <li> <p>UNHANDLED</p> <ul> <li>No matching Config CR exists in the system.</li> <li>Treated as a Target-type deviation.</li> <li>SDCIO only reports these deviations; no corrective action is taken.</li> </ul> </li> <li> <p>NOT-APPLIED</p> <ul> <li>A matching Config CR exists, but the actual configuration differs from what is defined in the Config CR.</li> <li>SDCIO will act on these deviations based on the configured mode: revertive or non-revertive.</li> </ul> </li> <li> <p>OVERRULED</p> <ul> <li>A matching Config CR exists, but the actual configuration has been overridden by a higher-priority intent.</li> <li>SDCIO reports these deviations but does not attempt to change the overriding configuration.</li> </ul> </li> </ol> <p>SDCIO automatically creates a deviation per target CR and one for each config CR. By default when no config CR exists all brownfield configuration is reported as a UNHANDLED deviation per target.</p>"},{"location":"user-guide/deviation/#revertive-vs-non-revertive-behavior","title":"Revertive vs. Non-Revertive Behavior","text":"<ul> <li>Revertive mode</li> </ul> <p>SDCIO will automatically reapply the Config CR when a NOT-APPLIED deviation is detected, restoring the intended configuration.</p> <ul> <li>Non-revertive mode</li> </ul> <p>SDCIO will treat the deviation as part of the active configuration. When a user wants to remove a deviation in non revertive mode, they can:</p> <ul> <li>Deny a full deviation \u2013 Delete the deviation CR. SDCIO will reapply the original Config CR without the deviation.</li> <li>Deny partial deviation \u2013 Delete only the relevant paths from the deviation CR. SDCIO will reapply the Config CR while preserving the accepted parts of the deviation.</li> </ul> <p>To change revertive or non revetive behavior can be done: - globally: as part of the deployment environment variables of the config-server</p> <pre><code>        - name: REVERTIVE\nvalue: \"true\"\n</code></pre> <ul> <li>per config CR: see config CR section</li> </ul>"},{"location":"user-guide/deviation/#example","title":"Example:","text":"<pre><code>kubectl get deviations.config.sdcio.dev \n</code></pre> <pre><code>NAME                                           TYPE     TARGET           DEVIATIONS\ndeviation.config.sdcio.dev/configset1-core01   config   default/core01   0\ndeviation.config.sdcio.dev/configset1-edge01   config   default/edge01   0\ndeviation.config.sdcio.dev/configset1-edge02   config   default/edge02   0\ndeviation.config.sdcio.dev/core01              target   default/core01   600\ndeviation.config.sdcio.dev/edge01              target   default/edge01   602\ndeviation.config.sdcio.dev/edge02              target   default/edge02   602\ndeviation.config.sdcio.dev/test                config   default/core01   0\n</code></pre>"},{"location":"user-guide/disablevalidation/","title":"Disable Validation","text":"<p>Data/Configuration which is transacted towards the data-server is YANG validated before we even attempt to push any changes towards the device.</p> <p>By Default we validate Mandatory statements, leafrefs (including min/max attributes), patterns, must statements, length, range and max-elements.</p> <p>However, in some cases, the YANG schema which is uploaded to schema-server might be incomplete/incorrect/...</p> <p>While a valid workaround may be to create YANG deviations to fix the schema issues, another might be to turn off certain knobs in the validation process.</p>"},{"location":"user-guide/disablevalidation/#data-server-configuration","title":"data-server configuration","text":"<p>the data-server (yaml) configuration exposes such knobs.</p> <p>By default (either implicit or explicit) the follow configuration is applied:</p> <pre><code>validation-defaults:\ndisabled-validators:\nmandatory: false\nleafref: false\nleafref-min-max-attributes: false\npattern: false\nmust-statement: false\nlength: false\nrange: false\nmax-elements: false\n</code></pre> <p>Should you want to disable validation for all (or some), then the following should be applied:</p> <pre><code>validation-defaults:\ndisabled-validators:\nmandatory: true\nleafref: true\nleafref-min-max-attributes: true\npattern: true\nmust-statement: true\nlength: true\nrange: true\nmax-elements: true\n</code></pre>"},{"location":"user-guide/disablevalidation/#existing-k8s-cluster","title":"existing k8s cluster","text":"<p>Apply/update the following ConfigMap </p> <pre><code>kubectl apply -f configmap-data-server.yaml\n</code></pre> data-server ConfigMap <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\nname: data-server\nnamespace: network-system\ndata: data-server.yaml: |\ngrpc-server:\nschema-server:\nenabled: true\nschemas-directory: ./schemas\ndata-server:\nmax-candidates: 16\nmax-recv-msg-size: 25165824 # 24 * 1024 * 1024 (24MB)\ndatastores: # this specifies MAIN datastores\nschema-store:\n# type is either memory or persistent (default)\ntype: persistent\npath: \"/schemadb\"\ncache: \ntype: local\nstore-type: badgerdb\ndir: \"/cached/caches\"\nprometheus:\naddress: \":56090\"\nvalidation-defaults:\ndisabled-validators:\nmandatory: true\nleafref: true\nleafref-min-max-attributes: true\npattern: true\nmust-statement: true\nlength: true\nrange: true\nmax-elements: true\n</code></pre> <p>Subsequently, delete the existing POD to force restart config-server/data-server with the updated configuration.</p> <pre><code>kubectl delete pod $(kubectl get pod -n network-system --no-headers -o custom-columns=\":metadata.name\") -n network-system\n</code></pre>"},{"location":"user-guide/introduction/","title":"Introduction","text":"<p>Thank you for using the schema driven configuration tool. This user guide has been crafted to assist you with instructions, tips, and insights to ensure a seamless experience.</p>"},{"location":"user-guide/troubleshooting/","title":"Troubleshooting","text":"<p>This section contains information on how to troubleshoot an SDCIO instance that is causing some trouble.</p>"},{"location":"user-guide/troubleshooting/#config-server","title":"Config-Server","text":"<p>The Config-Server provides the extension kubernetes apiserver and can therefor be mainly throubleshooted via <code>kubectl</code>.</p>"},{"location":"user-guide/troubleshooting/#api-registration","title":"API Registration","text":"<p>The Config-Server hooks in to the kubernetes apiserver by registering its APIs. If the apiregistration does not show up as AVAILABLE == True, then further investigation is required. <pre><code>kubectl get apiservices.apiregistration.k8s.io | grep \"sdcio.dev\\|NAME\"\n</code></pre></p> <p>The two services should be available. <pre><code>NAME                                   SERVICE                        AVAILABLE   AGE\nv1alpha1.config.sdcio.dev              network-system/config-server   True        6d\nv1alpha1.inv.sdcio.dev                 Local                          True        6d\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#deployment","title":"Deployment","text":"<p>The Config-Server is deployed in the network-system namespace via a Deployment.  Check for it to be READY. If it is not ready follow the basic troubleshooting for Deployments.</p> <p><pre><code>kubectl get -n network-system deployments.apps config-server\n</code></pre> There should be a config-server in the Ready state. <pre><code>NAME            READY   UP-TO-DATE   AVAILABLE   AGE\nconfig-server   1/1     1            1           6d\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#service","title":"Service","text":"<p>For the APIServer a Service is referenced, this reference must resolve to the config-server. Via the Endpoints the association to the pod can be verified. <pre><code>kubectl get -n network-system endpoints config-server -o yaml\n</code></pre></p> <p>The Subsets addresses must list the config-server pod. <pre><code>apiVersion: v1\nkind: Endpoints\nmetadata:\nannotations:\nendpoints.kubernetes.io/last-change-trigger-time: \"2024-02-09T13:13:34Z\"\ncreationTimestamp: \"2024-02-09T13:13:34Z\"\nlabels:\nsdcio.dev/config-server: \"true\"\nname: config-server\nnamespace: network-system\nresourceVersion: \"439928\"\nuid: 8f849512-6021-4c7e-a08b-c3cff25ed68b\nsubsets:\n- addresses:\n- ip: 10.244.0.8\nnodeName: api-server-control-plane\ntargetRef:\nkind: Pod\nname: config-server-84465fd854-bm258\nnamespace: network-system\nuid: b6986782-4055-431a-9742-f074d88febb5\nports:\n- port: 6443\nprotocol: TCP\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#sdctl","title":"SDCTL","text":"<p>sdctl is a binary available for gRPC interaction with the schema-server, data-server and cache. In a kubernetes environment, it can be launched by executing a container image.</p> <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:v0.0.9 --restart=Never --command -- /bin/bash\n</code></pre>"},{"location":"user-guide/troubleshooting/#schema-server","title":"Schema-Server","text":"<pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:v0.0.9 --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema list\n</code></pre> schema list <pre><code>request:\n\nresponse:\n+------+----------------------+---------+\n| Name |        Vendor        | Version |\n+------+----------------------+---------+\n|      | srl.nokia.sdcio.dev  | 23.10.1 |\n|      | sros.nokia.sdcio.dev | 23.10.2 |\n+------+----------------------+---------+\npod \"sdctl\" deleted\n</code></pre> <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:v0.0.9 --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema get --vendor sros.nokia.sdcio.dev --version 23.10.2 --path /configure\n</code></pre> schema get <pre><code>sdctl:/app$ /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema get --vendor sros.nokia.sdcio.dev --version 23.10.2 --path /configure\nrequest:\npath: {\n  elem: {\n    name: \"configure\"\n  }\n}\nschema: {\n  vendor: \"sros.nokia.sdcio.dev\"\n  version: \"23.10.2\"\n}\n\nresponse:\nschema: {\n  container: {\n    name: \"configure\"\n    description: \"Configure system configuration\"\n    namespace: \"urn:nokia.com:sros:ns:yang:sr:conf\"\n    prefix: \"conf\"\n    leaflists: {\n      name: \"apply-groups\"\n      description: \"Apply a configuration group at this level\"\n      namespace: \"urn:nokia.com:sros:ns:yang:sr:conf\"\n      prefix: \"conf\"\n      type: {\n        type: \"leafref\"\n        type_name: \"leafref\"\n        leafref: \"../groups/group/name\"\n      }\n      max_elements: 8\n      is_user_ordered: true\n    }\n    children: \"aaa\"\n    children: \"anysec\"\n    children: \"application-assurance\"\n    children: \"aps\"\n    children: \"bfd\"\n    children: \"bmp\"\n    children: \"call-trace\"\n    children: \"card\"\n    children: \"cflowd\"\n    children: \"chassis\"\n    children: \"connection-profile\"\n    children: \"esa\"\n    children: \"eth-cfm\"\n    children: \"eth-ring\"\n    children: \"filter\"\n    children: \"fwd-path-ext\"\n    children: \"group-encryption\"\n    children: \"groups\"\n    children: \"ipsec\"\n    children: \"isa\"\n    children: \"lag\"\n    children: \"log\"\n    children: \"macsec\"\n    children: \"mcac\"\n    children: \"mirror\"\n    children: \"multicast-management\"\n    children: \"oam-pm\"\n    children: \"openflow\"\n    children: \"policy-options\"\n    children: \"port\"\n    children: \"port-policy\"\n    children: \"port-xc\"\n    children: \"pw-port\"\n    children: \"python\"\n    children: \"qos\"\n    children: \"redundancy\"\n    children: \"router\"\n    children: \"routing-options\"\n    children: \"saa\"\n    children: \"satellite\"\n    children: \"service\"\n    children: \"sfm\"\n    children: \"subscriber-mgmt\"\n    children: \"system\"\n    children: \"test-oam\"\n    children: \"vrrp\"\n  }\n}\n\nsdctl:/app$\n</code></pre> schema get 2 <pre><code>sdctl:/app$ /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema get --vendor srl.nokia.sdcio.dev --version 23.10.1 --path /srl_nokia-interfaces\nrequest:\npath: {\n  elem: {\n    name: \"srl_nokia-interfaces\"\n  }\n}\nschema: {\n  vendor: \"srl.nokia.sdcio.dev\"\n  version: \"23.10.1\"\n}\n\nresponse:\nschema: {\n  container: {\n    name: \"srl_nokia-interfaces\"\n    description: \"Model for managing network interfaces and subinterfaces.\\n\\nThis model reuses data items defined in the IETF YANG model for\\ninterfaces described by RFC 7223\"\n    namespace: \"urn:srl_nokia/interfaces\"\n    prefix: \"srl_nokia-if\"\n    children: \"interface\"\n  }\n}\n</code></pre>"},{"location":"user-guide/troubleshooting/#data-server","title":"Data-Server","text":"<p>Listing data-stores <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:v0.0.9 --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 datastore list\n</code></pre></p> datastore list <pre><code>datastores: {\n  name: \"default.dev1\"\n  datastore: {\n    name: \"default.dev1\"\n  }\n  schema: {\n    vendor: \"srl.nokia.sdcio.dev\"\n    version: \"23.10.1\"\n  }\n  target: {\n    type: \"gnmi\"\n    address: \"172.18.0.4:57400\"\n  }\n}\ndatastores: {\n  name: \"default.sr1\"\n  datastore: {\n    name: \"default.sr1\"\n  }\n  schema: {\n    vendor: \"sros.nokia.sdcio.dev\"\n    version: \"23.10.2\"\n  }\n  target: {\n    type: \"netconf\"\n    address: \"172.22.1.11:830\"\n    status: CONNECTED\n  }\n}\ndatastores: {\n  name: \"default.dev2\"\n  datastore: {\n    name: \"default.dev2\"\n  }\n  schema: {\n    vendor: \"srl.nokia.sdcio.dev\"\n    version: \"23.10.1\"\n  }\n  target: {\n    type: \"gnmi\"\n    address: \"172.18.0.3:57400\"\n  }\n}\ndatastores: {\n  name: \"default.sr2\"\n  datastore: {\n    name: \"default.sr2\"\n  }\n  schema: {\n    vendor: \"sros.nokia.sdcio.dev\"\n    version: \"23.10.2\"\n  }\n  target: {\n    type: \"netconf\"\n    address: \"172.22.1.12:830\"\n    status: CONNECTED\n  }\n}\n\npod \"sdctl\" deleted\n</code></pre> <p>Fetching config from the data-store <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:v0.0.9 --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 data get --ds default.sr1 --path /configure/service\n</code></pre></p> data get <pre><code>request:\nname: \"default.sr1\"\npath: {\n  elem: {\n    name: \"configure\"\n  }\n  elem: {\n    name: \"service\"\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324217499\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"admin-state\"\n      }\n    }\n    value: {\n      string_val: \"enable\"\n    }\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324355878\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"customer\"\n      }\n    }\n    value: {\n      string_val: \"1\"\n    }\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324481720\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"service-id\"\n      }\n    }\n    value: {\n      uint_val: 101\n    }\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324648209\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"service-name\"\n      }\n    }\n    value: {\n      string_val: \"vprn123\"\n    }\n  }\n}\n</code></pre>"},{"location":"user-guide/troubleshooting.tmpl/","title":"Troubleshooting","text":"<p>This section contains information on how to troubleshoot an SDCIO instance that is causing some trouble.</p>"},{"location":"user-guide/troubleshooting.tmpl/#config-server","title":"Config-Server","text":"<p>The Config-Server provides the extension kubernetes apiserver and can therefor be mainly throubleshooted via <code>kubectl</code>.</p>"},{"location":"user-guide/troubleshooting.tmpl/#api-registration","title":"API Registration","text":"<p>The Config-Server hooks in to the kubernetes apiserver by registering its APIs. If the apiregistration does not show up as AVAILABLE == True, then further investigation is required. <pre><code>kubectl get apiservices.apiregistration.k8s.io | grep \"sdcio.dev\\|NAME\"\n</code></pre></p> <p>The two services should be available. <pre><code>NAME                                   SERVICE                        AVAILABLE   AGE\nv1alpha1.config.sdcio.dev              network-system/config-server   True        6d\nv1alpha1.inv.sdcio.dev                 Local                          True        6d\n</code></pre></p>"},{"location":"user-guide/troubleshooting.tmpl/#deployment","title":"Deployment","text":"<p>The Config-Server is deployed in the network-system namespace via a Deployment.  Check for it to be READY. If it is not ready follow the basic troubleshooting for Deployments.</p> <p><pre><code>kubectl get -n network-system deployments.apps config-server\n</code></pre> There should be a config-server in the Ready state. <pre><code>NAME            READY   UP-TO-DATE   AVAILABLE   AGE\nconfig-server   1/1     1            1           6d\n</code></pre></p>"},{"location":"user-guide/troubleshooting.tmpl/#service","title":"Service","text":"<p>For the APIServer a Service is referenced, this reference must resolve to the config-server. Via the Endpoints the association to the pod can be verified. <pre><code>kubectl get -n network-system endpoints config-server -o yaml\n</code></pre></p> <p>The Subsets addresses must list the config-server pod. <pre><code>apiVersion: v1\nkind: Endpoints\nmetadata:\nannotations:\nendpoints.kubernetes.io/last-change-trigger-time: \"2024-02-09T13:13:34Z\"\ncreationTimestamp: \"2024-02-09T13:13:34Z\"\nlabels:\nsdcio.dev/config-server: \"true\"\nname: config-server\nnamespace: network-system\nresourceVersion: \"439928\"\nuid: 8f849512-6021-4c7e-a08b-c3cff25ed68b\nsubsets:\n- addresses:\n- ip: 10.244.0.8\nnodeName: api-server-control-plane\ntargetRef:\nkind: Pod\nname: config-server-84465fd854-bm258\nnamespace: network-system\nuid: b6986782-4055-431a-9742-f074d88febb5\nports:\n- port: 6443\nprotocol: TCP\n</code></pre></p>"},{"location":"user-guide/troubleshooting.tmpl/#sdctl","title":"SDCTL","text":"<p>sdctl is a binary available for gRPC interaction with the schema-server, data-server and cache. In a kubernetes environment, it can be launched by executing a container image.</p> <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:${SDCTL_VERSION} --restart=Never --command -- /bin/bash\n</code></pre>"},{"location":"user-guide/troubleshooting.tmpl/#schema-server","title":"Schema-Server","text":"<pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:${SDCTL_VERSION} --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema list\n</code></pre> schema list <pre><code>request:\n\nresponse:\n+------+----------------------+---------+\n| Name |        Vendor        | Version |\n+------+----------------------+---------+\n|      | srl.nokia.sdcio.dev  | 23.10.1 |\n|      | sros.nokia.sdcio.dev | 23.10.2 |\n+------+----------------------+---------+\npod \"sdctl\" deleted\n</code></pre> <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:${SDCTL_VERSION} --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema get --vendor sros.nokia.sdcio.dev --version 23.10.2 --path /configure\n</code></pre> schema get <pre><code>sdctl:/app$ /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema get --vendor sros.nokia.sdcio.dev --version 23.10.2 --path /configure\nrequest:\npath: {\n  elem: {\n    name: \"configure\"\n  }\n}\nschema: {\n  vendor: \"sros.nokia.sdcio.dev\"\n  version: \"23.10.2\"\n}\n\nresponse:\nschema: {\n  container: {\n    name: \"configure\"\n    description: \"Configure system configuration\"\n    namespace: \"urn:nokia.com:sros:ns:yang:sr:conf\"\n    prefix: \"conf\"\n    leaflists: {\n      name: \"apply-groups\"\n      description: \"Apply a configuration group at this level\"\n      namespace: \"urn:nokia.com:sros:ns:yang:sr:conf\"\n      prefix: \"conf\"\n      type: {\n        type: \"leafref\"\n        type_name: \"leafref\"\n        leafref: \"../groups/group/name\"\n      }\n      max_elements: 8\n      is_user_ordered: true\n    }\n    children: \"aaa\"\n    children: \"anysec\"\n    children: \"application-assurance\"\n    children: \"aps\"\n    children: \"bfd\"\n    children: \"bmp\"\n    children: \"call-trace\"\n    children: \"card\"\n    children: \"cflowd\"\n    children: \"chassis\"\n    children: \"connection-profile\"\n    children: \"esa\"\n    children: \"eth-cfm\"\n    children: \"eth-ring\"\n    children: \"filter\"\n    children: \"fwd-path-ext\"\n    children: \"group-encryption\"\n    children: \"groups\"\n    children: \"ipsec\"\n    children: \"isa\"\n    children: \"lag\"\n    children: \"log\"\n    children: \"macsec\"\n    children: \"mcac\"\n    children: \"mirror\"\n    children: \"multicast-management\"\n    children: \"oam-pm\"\n    children: \"openflow\"\n    children: \"policy-options\"\n    children: \"port\"\n    children: \"port-policy\"\n    children: \"port-xc\"\n    children: \"pw-port\"\n    children: \"python\"\n    children: \"qos\"\n    children: \"redundancy\"\n    children: \"router\"\n    children: \"routing-options\"\n    children: \"saa\"\n    children: \"satellite\"\n    children: \"service\"\n    children: \"sfm\"\n    children: \"subscriber-mgmt\"\n    children: \"system\"\n    children: \"test-oam\"\n    children: \"vrrp\"\n  }\n}\n\nsdctl:/app$\n</code></pre> schema get 2 <pre><code>sdctl:/app$ /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema get --vendor srl.nokia.sdcio.dev --version 23.10.1 --path /srl_nokia-interfaces\nrequest:\npath: {\n  elem: {\n    name: \"srl_nokia-interfaces\"\n  }\n}\nschema: {\n  vendor: \"srl.nokia.sdcio.dev\"\n  version: \"23.10.1\"\n}\n\nresponse:\nschema: {\n  container: {\n    name: \"srl_nokia-interfaces\"\n    description: \"Model for managing network interfaces and subinterfaces.\\n\\nThis model reuses data items defined in the IETF YANG model for\\ninterfaces described by RFC 7223\"\n    namespace: \"urn:srl_nokia/interfaces\"\n    prefix: \"srl_nokia-if\"\n    children: \"interface\"\n  }\n}\n</code></pre>"},{"location":"user-guide/troubleshooting.tmpl/#data-server","title":"Data-Server","text":"<p>Listing data-stores <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:${SDCTL_VERSION} --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 datastore list\n</code></pre></p> datastore list <pre><code>datastores: {\n  name: \"default.dev1\"\n  datastore: {\n    name: \"default.dev1\"\n  }\n  schema: {\n    vendor: \"srl.nokia.sdcio.dev\"\n    version: \"23.10.1\"\n  }\n  target: {\n    type: \"gnmi\"\n    address: \"172.18.0.4:57400\"\n  }\n}\ndatastores: {\n  name: \"default.sr1\"\n  datastore: {\n    name: \"default.sr1\"\n  }\n  schema: {\n    vendor: \"sros.nokia.sdcio.dev\"\n    version: \"23.10.2\"\n  }\n  target: {\n    type: \"netconf\"\n    address: \"172.22.1.11:830\"\n    status: CONNECTED\n  }\n}\ndatastores: {\n  name: \"default.dev2\"\n  datastore: {\n    name: \"default.dev2\"\n  }\n  schema: {\n    vendor: \"srl.nokia.sdcio.dev\"\n    version: \"23.10.1\"\n  }\n  target: {\n    type: \"gnmi\"\n    address: \"172.18.0.3:57400\"\n  }\n}\ndatastores: {\n  name: \"default.sr2\"\n  datastore: {\n    name: \"default.sr2\"\n  }\n  schema: {\n    vendor: \"sros.nokia.sdcio.dev\"\n    version: \"23.10.2\"\n  }\n  target: {\n    type: \"netconf\"\n    address: \"172.22.1.12:830\"\n    status: CONNECTED\n  }\n}\n\npod \"sdctl\" deleted\n</code></pre> <p>Fetching config from the data-store <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:${SDCTL_VERSION} --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 data get --ds default.sr1 --path /configure/service\n</code></pre></p> data get <pre><code>request:\nname: \"default.sr1\"\npath: {\n  elem: {\n    name: \"configure\"\n  }\n  elem: {\n    name: \"service\"\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324217499\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"admin-state\"\n      }\n    }\n    value: {\n      string_val: \"enable\"\n    }\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324355878\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"customer\"\n      }\n    }\n    value: {\n      string_val: \"1\"\n    }\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324481720\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"service-id\"\n      }\n    }\n    value: {\n      uint_val: 101\n    }\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324648209\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"service-name\"\n      }\n    }\n    value: {\n      string_val: \"vprn123\"\n    }\n  }\n}\n</code></pre>"},{"location":"user-guide/configuration/schemas/","title":"Schema","text":"<p>The initial step in integrating a device with SDC involves importing the device's schema. SDC is equipped to handle YANG schemas, provided all necessary model files and their respective dependencies are available in a git repository. This process is facilitated through the Schema CustomResource, detailed here.</p> <p>The Schema CustomResource is configured using three main parameter groups:</p> <ol> <li>Source of Schema: Determined by <code>repoURL</code>, <code>kind</code>, and <code>ref</code> parameters.</li> <li>Schema Identification: Specified using <code>provider</code> and <code>version</code> parameters.</li> <li>Schema Parsing Method: Configured through <code>models</code>, <code>includes</code>, and <code>excludes</code> parameters.</li> </ol>"},{"location":"user-guide/configuration/schemas/#source-of-schema-repository-configuration","title":"Source of Schema: Repository Configuration","text":"<p>To successfully retrieve the schema, it is essential for users to provide four key parameters: <code>repoURL</code>, <code>kind</code>, <code>ref</code> and <code>credentials</code>. These parameters jointly establish the methodology for schema acquisition:</p> <ul> <li><code>repoURL</code>: This parameter is pivotal as it specifies the repository's URL where the schema is located.</li> <li><code>kind</code>: It determines the nature of the reference point within the repository, offering options between a \"tag\" or a \"branch\".</li> <li><code>ref</code>: This parameter is closely linked to kind and pinpoints the exact tag or branch name within the repository.</li> <li><code>credentials</code>: This parameter is point to a secret name in the same namespace as the <code>schema</code> CR. It is required if your repository requires authentication e.g. a private repo.</li> <li><code>proxy</code>: This determines the proxy parameters to use if the git repo is behind a proxy</li> </ul> <p>Following the identification of schema directories and files for download, the <code>dirs</code> attribute plays a crucial role. It allows users to map each source directory to a corresponding local storage location. Essentially, dirs is an array comprising pairs of <code>src</code> (source directory) and <code>dst</code> (destination path). This setup facilitates the organization of downloaded schema files, ensuring they are stored in designated local directories for easy access and management.</p> <p>If the dirs attribute is not set, it defaults to <code>$pwd</code> for both <code>src</code> and <code>dst</code>.</p> <p>Some vendors publish their primary YANG files in a central repository; however, included files may reside in separate repositories. To address this, the repository definition in the Schema Custom Resource Definition (CRD) allows for the specification of multiple repositories. This setup ensures that all components contributing to the schema are accessible and properly linked, even if they are stored across different locations.</p>"},{"location":"user-guide/configuration/schemas/#repository-authentication","title":"Repository authentication","text":"<p>If your schema repository requires authentication a secret of type <code>kubernetes.io/basic-auth</code> is referenced in the schema CR. An Example of such secret is provided below.</p> <p>username/password</p> <p>Please fill out your own username and password/token</p> <p>namespace</p> <p>The secret MUST use the same namespace as the schema CR that is referencing it.</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: personal-access-token\ndata:\nusername: &lt;base64-encoded-username&gt;\npassword: &lt;base64-encoded-password&gt;\ntype: kubernetes.io/basic-auth\n</code></pre>"},{"location":"user-guide/configuration/schemas/#schema-identification-naming-conventions","title":"Schema Identification: Naming Conventions","text":"<p>The schema is uniquely identified through <code>provider</code> and <code>version</code>.</p> <ul> <li><code>provider</code>: Contains details about the schema issuer, typically including vendor and chassis type.</li> <li><code>version</code>: Represents the specific version of the schema.</li> </ul>"},{"location":"user-guide/configuration/schemas/#schema-parsing-method-handling-yang-models","title":"Schema Parsing Method: Handling YANG Models","text":"<p>YANG schemas are comprised of several implemented models, some of which may have dependencies on other models. The `Schema`` CustomResource accommodates this complexity with specific parameters:</p> <ul> <li><code>models</code>: Defines paths to files or directories containing the models implemented by the schema.</li> <li><code>includes</code>: Specifies paths to models that are imported as dependencies by the implemented models.</li> <li><code>excludes</code>: An optional list of regular expression parameters. It filters out specific models during the loading process based on matching criteria.</li> </ul> <p>By carefully setting these parameters, users can seamlessly onboard devices into the SDC framework, ensuring that the schemas are accurately loaded and parsed.</p>"},{"location":"user-guide/configuration/schemas/#examples","title":"Examples","text":""},{"location":"user-guide/configuration/schemas/#sr-linux-v24101","title":"SR Linux v24.10.1","text":"<p>The below CR defines an SR Linux <code>Schema</code> version 24.10.1.</p> <p>The YANG files will be retrieved from the github repo <code>https://github.com/nokia/srlinux-yang-models</code> tag <code>v24.10.1</code>. The remote directory <code>srlinux-yang-models</code> at the roo level of the git repository will be mapped to <code>$pwd</code> (<code>dst: .</code>) in the local file system</p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: srl.nokia.sdcio.dev-24.10.1\nnamespace: default\nspec:\nprovider: srl.nokia.sdcio.dev\nrepositories:\n- dirs:\n- dst: .\nsrc: srlinux-yang-models\nkind: tag\nref: v24.10.1\nrepoURL: https://github.com/nokia/srlinux-yang-models\nschema:\nexcludes:\n- .*tools.*\nincludes:\n- ietf\n- openconfig/extensions\n- openconfig/openconfig-extensions.yang\nmodels:\n- srl_nokia/models\n- dirs:\n- dst: deviations\nsrc: .\nkind: branch\nref: v24.10\nrepoURL: https://github.com/sdcio/srlinux-yang-patch\nschema:\nmodels:\n- deviations\nversion: 24.10.1\n</code></pre> <p>To apply the CR, store the above content in a file (e.g: <code>srlinux_24.10.1_schema.yaml</code>) and run the command:</p> <pre><code>kubectl apply -f srlinux_24.10.1_schema.yaml\n</code></pre> <p>After applying the previous CR to a kubernetes cluster, the <code>Schema</code> can be viewed with the commands:</p> <pre><code>kubectl get schemas.inv.sdcio.dev\n</code></pre> <pre><code>kubectl get schemas srl.nokia.sdcio.dev-24.10.1 -o yaml\n</code></pre> <p>Sample outputs:</p> <pre><code>$ kubectl get schemas.inv.sdcio.dev\nNAME                          READY   PROVIDER              VERSION   URL                                            REF\nsrl.nokia.sdcio.dev-24.10.1   True    srl.nokia.sdcio.dev   24.10.1   https://github.com/nokia/srlinux-yang-models   v24.10.1\n</code></pre> <pre><code>$ kubectl get schemas srl.nokia.sdcio.dev-24.10.1 -o yaml\napiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\n  annotations:\n    kubectl.kubernetes.io/last-applied-configuration: |\n{\"apiVersion\":\"inv.sdcio.dev/v1alpha1\",\"kind\":\"Schema\",\"metadata\":{\"annotations\":{},\"name\":\"srl.nokia.sdcio.dev-24.10.1\",\"namespace\":\"default\"},\"spec\":{\"provider\":\"srl.nokia.sdcio.dev\",\"repositories\":[{\"dirs\":[{\"dst\":\".\",\"src\":\"srlinux-yang-models\"}],\"kind\":\"tag\",\"ref\":\"v24.10.1\",\"repoURL\":\"https://github.com/nokia/srlinux-yang-models\",\"schema\":{\"excludes\":[\".*tools.*\"],\"includes\":[\"ietf\",\"openconfig/extensions\",\"openconfig/openconfig-extensions.yang\"],\"models\":[\"srl_nokia/models\"]}},{\"dirs\":[{\"dst\":\"deviations\",\"src\":\".\"}],\"kind\":\"branch\",\"ref\":\"v24.10\",\"repoURL\":\"https://github.com/sdcio/srlinux-yang-patch\",\"schema\":{\"models\":[\"deviations\"]}}],\"version\":\"24.10.1\"}}\ncreationTimestamp: \"2025-01-14T13:44:35Z\"\nfinalizers:\n  - schema.inv.sdcio.dev/finalizer\n  generation: 1\nname: srl.nokia.sdcio.dev-24.10.1\n  namespace: default\n  resourceVersion: \"1357\"\nuid: 17eaf452-1cae-4286-afc6-a0c0e051e0c4\nspec:\n  provider: srl.nokia.sdcio.dev\n  repositories:\n  - dirs:\n    - dst: .\n      src: srlinux-yang-models\n    kind: tag\n    ref: v24.10.1\n    repoURL: https://github.com/nokia/srlinux-yang-models\n    schema:\n      excludes:\n      - .*tools.*\n      includes:\n      - ietf\n      - openconfig/extensions\n      - openconfig/openconfig-extensions.yang\n      models:\n      - srl_nokia/models\n  - dirs:\n    - dst: deviations\n      src: .\n    kind: branch\n    ref: v24.10\n    repoURL: https://github.com/sdcio/srlinux-yang-patch\n    schema:\n      models:\n      - deviations\n  version: 24.10.1\nstatus:\n  conditions:\n  - lastTransitionTime: \"2025-01-14T13:44:42Z\"\nmessage: \"\"\nreason: Ready\n    status: \"True\"\ntype: Ready\n</code></pre>"},{"location":"user-guide/configuration/schemas/#sros-24101","title":"SROS 24.10.1","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: sros.nokia.sdcio.dev-24.10.1\nnamespace: default\nspec:\nprovider: sros.nokia.sdcio.dev\nversion: 24.10.R1\nrepositories:\n- repoURL: https://github.com/nokia/7x50_YangModels\nkind: tag\nref: sros_24.10.r1\ndirs:\n- src: YANG\ndst: .\nschema:\nmodels:\n- nokia-combined\nincludes:\n- ietf\n- nokia-sros-yang-extensions.yang\nexcludes: []\n</code></pre>"},{"location":"user-guide/configuration/schemas/#juniper-mx-232r1","title":"Juniper MX 23.2R1","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: mx.juniper.23.2r1\nnamespace: default\nspec:\nprovider: mx.juniper.sdcio.dev\nversion: 23.2R1\nrepositories:\n- repoURL: https://github.com/Juniper/yang\nkind: branch\nref: master\ndirs:\n- src: 23.2/23.2R1/junos/conf\ndst: junos\n- src: 23.2/23.2R1/common\ndst: common\nschema:\nmodels:\n- junos\nincludes:\n- common\n</code></pre>"},{"location":"user-guide/configuration/schemas/#juniper-qfx-232r1","title":"Juniper QFX 23.2R1","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: qfx.juniper.23.2r1\nnamespace: default\nspec:\nprovider: qfx.juniper.sdcio.dev\nversion: 23.2R1\nrepositories:\n- repoURL: https://github.com/Juniper/yang\nkind: branch\nref: master\ndirs:\n- src: 23.2/23.2R1/junos-qfx/conf\ndst: junos\n- src: 23.2/23.2R1/common\ndst: common\nschema:\nmodels:\n- junos\nincludes:\n- common\n</code></pre>"},{"location":"user-guide/configuration/schemas/#juniper-ex-232r1","title":"Juniper EX 23.2R1","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: ex.juniper.23.2r1\nnamespace: default\nspec:\nprovider: ex.juniper.sdcio.dev\nversion: 23.2R1\nrepositories:\n- repoURL: https://github.com/Juniper/yang\nkind: branch\nref: master\ndirs:\n- src: 23.2/23.2R1/junos-ex/conf\ndst: junos\n- src: 23.2/23.2R1/common\ndst: common\nschema:\nmodels:\n- junos\nincludes:\n- common\n</code></pre>"},{"location":"user-guide/configuration/schemas/#juniper-nfx-232r1","title":"Juniper NFX 23.2R1","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: nfx.juniper.23.2r1\nnamespace: default\nspec:\nprovider: nfx.juniper.sdcio.dev\nversion: 23.2R1\nrepositories:\n- repoURL: https://github.com/Juniper/yang\nkind: branch\nref: master\ndirs:\n- src: 23.2/23.2R1/junos-nfx/conf\ndst: junos\n- src: 23.2/23.2R1/common\ndst: common\nschema:\nmodels:\n- junos\nincludes:\n- common\n</code></pre>"},{"location":"user-guide/configuration/schemas/#arista-eos-4311f","title":"Arista EOS 4.31.1F","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: eos.arista.4.31.1f\nnamespace: default\nspec:\nprovider: eos.arista.sdcio.dev\nversion: 4.31.1F\nrepositories:\n- repoURL: https://github.com/aristanetworks/yang\nkind: branch\nref: master\ndirs:\n- src: EOS-4.31.1F\ndst: .\nschema:\nmodels:\n- release/openconfig/models\n- experimental/eos/models\n- openconfig/public\nincludes:\n- ietf\nexcludes:\n- arista-acl-notsupported-deviations.yang\n- arista-bfd-notsupported-deviations.yang\n- arista-defined-sets-notsupported-deviations.yang\n- arista-interfaces-notsupported-deviations.yang\n- arista-keychain-notsupported-deviations.yang\n- arista-lacp-notsupported-deviations.yang\n- arista-lldp-notsupported-deviations.yang\n- arista-macsec-notsupported-deviations.yang\n- arista-network-instance-notsupported-deviations.yang\n- arista-platform-notsupported-deviations.yang\n- arista-qos-notsupported-deviations.yang\n- arista-sampling-notsupported-deviations.yang\n- arista-spanning-tree-notsupported-deviations.yang\n- arista-system-notsupported-deviations.yang\n- arista-telemetry-notsupported-deviations.yang\n- arista-terminal-device-notsupported-deviations.yang\n- repoURL: https://github.com/YangModels/yang\nkind: branch\nref: main\ndirs:\n- src: standard/ietf/RFC\ndst: ietf\nschema:\nmodels:\n- ietf/ietf-inet-types.yang\n- ietf/ietf-yang-types.yang\n# Arista has broken yang models, we're applying deviations here to fix the YANG model, until Arista has fixed it upstream.\n- repoURL: https://github.com/sdcio/arista-yang-patch\nkind: branch\nref: main\ndirs:\n- src: .\ndst: sdcio-deviations\nschema:\nmodels:\n- sdcio-deviations/EOS-4.31.1F/release/openconfig/models\n</code></pre>"},{"location":"user-guide/configuration/schemas/#arista-eos-4330f","title":"Arista EOS 4.33.0F","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: eos.arista.4.33.0f\nnamespace: default\nspec:\nprovider: eos.arista.sdcio.dev\nversion: 4.33.0F\nrepositories:\n- repoURL: https://github.com/aristanetworks/yang\nkind: branch\nref: master\ndirs:\n- src: EOS-4.33.0F\ndst: .\nschema:\nmodels:\n- release/openconfig/models\n- experimental/eos/models\n- openconfig/public\nincludes:\n- ietf\nexcludes:\n- arista-ale-counters-.*\n- arista-open-config-open-config-system-session-config.yang\n- arista-acl-notsupported-deviations.yang\n- arista-bfd-notsupported-deviations.yang\n- arista-defined-sets-notsupported-deviations.yang\n- arista-interfaces-notsupported-deviations.yang\n- arista-keychain-notsupported-deviations.yang\n- arista-lacp-notsupported-deviations.yang\n- arista-lldp-notsupported-deviations.yang\n- arista-macsec-notsupported-deviations.yang\n- arista-network-instance-notsupported-deviations.yang\n- arista-platform-notsupported-deviations.yang\n- arista-qos-notsupported-deviations.yang\n- arista-sampling-notsupported-deviations.yang\n- arista-spanning-tree-notsupported-deviations.yang\n- arista-system-notsupported-deviations.yang\n- arista-telemetry-notsupported-deviations.yang\n- arista-terminal-device-notsupported-deviations.yang\n- repoURL: https://github.com/YangModels/yang\nkind: branch\nref: main\ndirs:\n- src: standard/ietf/RFC\ndst: ietf\nschema:\nmodels:\n- ietf/ietf-inet-types.yang\n- ietf/ietf-yang-types.yang\n# Arista has broken yang models, we're applying deviations here to fix the YANG model, until Arista has fixed it upstream.\n- repoURL: https://github.com/sdcio/arista-yang-patch\nkind: branch\nref: main\ndirs:\n- src: .\ndst: sdcio-deviations\nschema:\nmodels:\n- sdcio-deviations/EOS-4.33.0F/release/openconfig/models\n</code></pre>"},{"location":"user-guide/configuration/config/config/","title":"Config","text":"<p>Configs are partial or complete pieces of configuration that are intended to be deployed to the referenced target.</p>"},{"location":"user-guide/configuration/config/config/#attributes","title":"Attributes","text":"<ul> <li><code>config</code>: Is a list of configuration pieces that consist of a <code>path</code> and a <code>value</code> attribute.<ul> <li><code>path</code>: The path describes where the configuration (<code>value</code>) part is rooted. This can either by <code>/</code> to indicate the configuration root level or any valid path within the schema.</li> <li><code>value</code>: The canfiguration in yaml format that is meant to go under the <code>path</code> in the target device.</li> </ul> </li> <li><code>priority</code>: The priority field is used as a tie-breaker, when multiple Config intents try to set overlapping configurations</li> <li><code>lifecycle</code>: Lifecycle determines the lifecycle policies of the resource e.g. delete orphan or delete<ul> <li><code>deletionPolicy</code>: DeletionPolicy defines the deletion policy of the resource.  <ul> <li><code>delete</code>: (default) deletes the config from the target</li> <li><code>orphan</code>: does NOT delete the config from the target</li> </ul> </li> </ul> </li> <li><code>revertive</code>: defines the revertive or non revertive behavior. if not defined the global configuration applies.</li> </ul>"},{"location":"user-guide/configuration/config/config/#example","title":"Example","text":"<pre><code>apiVersion: config.sdcio.dev/v1alpha1\nkind: Config\nmetadata:\nname: test\nnamespace: default\nlabels:\nconfig.sdcio.dev/targetName: dev1\nconfig.sdcio.dev/targetNamespace: default\nspec:\npriority: 10\nconfig:\n- path: /\nvalue:\ninterface:\n- name: \"system0\"\nadmin-state: \"enable\"\ndescription: \"k8s-system0-dummy\"\n</code></pre>"},{"location":"user-guide/configuration/config/config/#example-with-deletion-policy-orphan","title":"Example with deletion policy orphan","text":"<pre><code>apiVersion: config.sdcio.dev/v1alpha1\nkind: Config\nmetadata:\nname: test-orphan\nnamespace: default\nlabels:\nconfig.sdcio.dev/targetName: dev1\nconfig.sdcio.dev/targetNamespace: default\nspec:\nlifecycle:\ndeletionPolicy: orphan\npriority: 10\nconfig:\n- path: /\nvalue:\ninterface:\n- name: \"system0\"\nadmin-state: \"enable\"\ndescription: \"k8s-system0-dummy\"\n</code></pre>"},{"location":"user-guide/configuration/config/configset/","title":"ConfigSet","text":"<p>ConfigSets are partial or complete pieces of configuration that are intended to be deployed to a selected set of targets. Typically used to apply the same configuration to a set of targets using the targetSelector</p>"},{"location":"user-guide/configuration/config/configset/#attributes","title":"Attributes","text":"<ul> <li><code>target</code>: Is a list of configuration pieces that consist of a <code>targetSelector</code> attributes.<ul> <li><code>targetSelector</code>: The rules used to select the targets on which this config object gets applied to</li> </ul> </li> <li><code>config</code>: Is a list of configuration pieces that consist of a <code>path</code> and a <code>value</code> attribute.<ul> <li><code>path</code>: The path describes where the configuration (<code>value</code>) part is rooted. This can either by <code>/</code> to indicate the configuration root level or any valid path within the schema.</li> <li><code>value</code>: The canfiguration in yaml format that is meant to go under the <code>path</code> in the target device.</li> </ul> </li> <li><code>priority</code>: The priority field is used as a tie-breaker, when multiple Config intents try to set overlapping configurations.</li> <li><code>lifecycle</code>: Lifecycle determines the lifecycle policies of the resource e.g. delete orphan or delete<ul> <li><code>deletionPolicy</code>: DeletionPolicy defines the deletion policy of the resource.  <ul> <li><code>delete</code>: (default) deletes the config from the target</li> <li><code>orphan</code>: does NOT delete the config from the target</li> </ul> </li> </ul> </li> <li><code>revertive</code>: defines the revertive or non revertive behavior. if not defined the global configuration applies.</li> </ul>"},{"location":"user-guide/configuration/config/configset/#example","title":"Example","text":"<pre><code>apiVersion: config.sdcio.dev/v1alpha1\nkind: ConfigSet\nmetadata:\nname: intent1\nnamespace: default\nspec:\ntarget:\ntargetSelector:\nmatchLabels:\nsdcio.dev/region: us-east\npriority: 10\nconfig:\n- path: /\nvalue:\ninterface:\n- name: ethernet-1/1\nadmin-state: \"enable\"\ndescription: \"intent1\"\nvlan-tagging: true\nsubinterface:\n- index: 2\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 2\n- index: 3\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 3\n- index: 4\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 4\n</code></pre>"},{"location":"user-guide/configuration/discovery/addresses/","title":"Device discovery using Addresses (IPs or DNS names)","text":"<p>Address discovery uses the provided address in the <code>addresses</code> section of the <code>DiscoveryRule</code> CustomResource to identify the target device. With address discovery <code>sdc</code> allows to enable or disable full discovery (see Discovery Configuration Options).</p>"},{"location":"user-guide/configuration/discovery/addresses/#attributes","title":"Attributes","text":"<ul> <li><code>addresses</code><ul> <li><code>address</code>: The mgmt address of the Target.</li> <li><code>hostName</code>: The hostname of the target. if left empty the provided address will be used as the hostname.</li> </ul> </li> </ul>"},{"location":"user-guide/configuration/discovery/addresses/#examples","title":"Examples","text":"<p>Example of a <code>DiscoveryRule</code></p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-address\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\naddresses:\n- address: 172.18.0.4\nhostName: dev1\n- address: 172.18.0.3\nhostName: dev2\ndiscoveryProfile:\ncredentials: srl.nokia.sdcio.dev connectionProfiles:\n- gnmi-skipverify\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-get\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\n</code></pre>"},{"location":"user-guide/configuration/discovery/discovery_vendor_profile/","title":"The DiscoveryVendorProfile CustomResource","text":"<p>The DiscoveryVendorProfile defines the provider specific information that uniquely identify the provider, version together with additional metadata (such as platformType, hostname, serial-number and mac Address)</p> <p>Curently we support gNMI, but other protocols are envisioned to be supported going forward.</p>"},{"location":"user-guide/configuration/discovery/discovery_vendor_profile/#attributes","title":"Attributes","text":"<ul> <li><code>gnmi</code>:<ul> <li><code>organization</code>: organization matches the gnmi capabilities organization</li> <li><code>preserveNamespace</code>: if the path returned from the device contains a leading namespace the default behaviour is to preserve it. If you want to strip the namespace, set this parameter to false.</li> <li><code>modelMatch</code>: if an organization has multiple NOS(es) it can distibuish the provider using a unique key in the model</li> <li><code>encoding</code>: the gnmi encoding used to get the paths (default: JSON_IETF, other: JSON, PROTO, ASCII)</li> <li><code>paths</code>: slice/list to identify the key (fixed mapping to the target information in the target CR)<ul> <li><code>key</code>: supported keys are <code>version</code>, <code>platform</code>, <code>hostname</code>, <code>serialNumber</code>, <code>macAddress</code></li> <li><code>path</code>: gnmi path related to the key (the path can contain the keys or not)</li> <li><code>regex</code>: used to transform the retrieved data</li> <li><code>script</code>: starlark script to transform the retrieved data (used after regex in sequence)</li> </ul> </li> </ul> </li> </ul>"},{"location":"user-guide/configuration/discovery/discovery_vendor_profile/#how-gnmi-discovery-works","title":"How gNMI discovery works","text":"<p>A gNMI Capabilities Request is sent</p> <ul> <li>The organization field in the capabilities identifies the provider.</li> <li>If the vendor supports multiple Network OS (NOS) options, modelMatch is used to distinguish them.</li> </ul> <p>Once the NOS is identified, additional device parameters (e.g., version, MAC address, serial number, and platform) are retrieved using gNMI paths defined in DiscoveryVendorProfile.</p> <ul> <li>for each provided path the retrieved data can be transformed using regex and starlark function before it is being used to update the target CR.</li> </ul> <p>If discovery is successful, the extracted parameters are reflected in the Target CR.</p> <p>The version and provider are important as they are used to match the schema</p>"},{"location":"user-guide/configuration/discovery/discovery_vendor_profile/#examples","title":"Examples","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryVendorProfile\nmetadata:\nname: srl.nokia.sdcio.dev\nnamespace: default\nspec:\ngnmi:\norganization: Nokia\nmodelMatch: nokia.com:srlinux\n#encoding: PROTO\npaths:\n# Some vendors return a JSON IETF blob of data with a different gNMI path than the requested one if keys are not specified.\n# Make sure to include keys in the XPATH when the encoding is JSON_IETF. Alternatively use PROTO or ASCII encoding.\n- key: version\npath: platform/control[slot=A]/software-version\nregex: ^v?(\\d+\\.\\d+\\.\\d+)\n- key: platform\npath: platform/chassis/type\n- key: hostname\npath: system/name/host-name\n- key: serialNumber\npath: platform/chassis/serial-number\n- key: macAddress\npath: platform/chassis/hw-mac-address\n</code></pre> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryVendorProfile\nmetadata:\nname: eos.arista.sdcio.dev\nnamespace: default\nspec:\ngnmi:\norganization: \"Arista Networks, Inc.\"\npaths:\n- key: version\npath: components/component/state/software-version\nregex: ^v?(\\d+\\.\\d+\\.\\d+[A-Za-z]?)\n- key: platform\npath: components/component/state/part-no\n- key: hostname\npath: system/state/hostname\n- key: serialNumber\npath: components/component/state/serial-no\n- key: macAddress\npath: lldp/state/chassis-id\n</code></pre> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryVendorProfile\nmetadata:\nname: sros.nokia.sdcio.dev\nnamespace: default\nspec:\ngnmi:\norganization: Nokia\nmodelMatch: nokia-conf\npaths:\n- key: version\npath: state/system/version/version-number\nregex: ^\\w?-(\\d+.\\d+\\.R\\d+)\n- key: platform\npath: state/system/platform\n- key: hostname\npath: state/system/oper-name\n- key: serialNumber\npath: state/chassis/hardware-data/serial-number\n- key: macAddress\npath: state/system/base-mac-address\n</code></pre> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryVendorProfile\nmetadata:\nname: iosxr.cisco.sdcio.dev\nnamespace: default\nspec:\ngnmi:\norganization: \"Cisco Systems, Inc.\"\npreserveNamespace: false\npaths:\n- key: version\npath: system/state/software-version\nregex: ^(\\d+\\.\\d+\\.\\d+(?:\\.\\d+[\\.\\w]*)?)$\n- key: platform\npath: components/component[name=Rack 0]/state/part-no\n- key: hostname\npath: system/state/hostname\n- key: serialNumber\npath: components/component[name=Rack 0]/state/serial-no\n- key: macAddress\npath: interfaces/interface[name=MgmtEth0/RP0/CPU0/0]/openconfig-if-ethernet:ethernet/state/mac-address\n</code></pre>"},{"location":"user-guide/configuration/discovery/introduction/","title":"Target Discovery guide","text":"<p>SDC offers robust and flexible mechanisms for discovering devices within a network. This capability is crucial for automating the configuration and management of network devices.</p> <p>Device discovery in SDC consists of two key parts:</p> <ol> <li>Identifying the IP address or hostname of the device.</li> <li>Determining the device\u2019s provider (vendor/nos) and version.</li> </ol> <p>A central aspect of this discovery process is the <code>DiscoveryRule</code> CustomResource, which not only configures discovery mechanisms but also generates a specific CustomResource called <code>Target</code> for each discovered device.</p>"},{"location":"user-guide/configuration/discovery/introduction/#identifying-the-ip-address-or-hostname","title":"Identifying the IP Address or Hostname","text":"<p>SDC supports various discovery mechanisms for determining the IP address or hostname of network devices. These methods allow for flexibility depending on the network environment:</p> <ul> <li>IP Prefix Based Discovery: Ideal for handling IP ranges and scenarios where the specific target IP address is unknown. This method allows <code>sdc</code> to intelligently explore and identify devices within specified IP prefixes.</li> <li>IP Address Based Discovery: Perfect for situations where the exact IP address of the target device is known. <code>sdc</code> enables precise discovery based on provided addresses (IP or DNS), ensuring accuracy in device identification.</li> <li>POD Based Discovery: Ideal when devices are instantiated as pods in a cluster. <code>sdc</code> enables device discovery based on the address of Kubernetes Pods. This advancement aligns with modern containerized environments, providing enhanced visibility into your network infrastructure.</li> <li>SVC Based Discovery: Ideal when devices are accessible through services in a pod. <code>sdc</code> discovers devices by utilizing the address of Kubernetes Services. This approach ensures comprehensive network mapping within dynamic Kubernetes services.</li> </ul>"},{"location":"user-guide/configuration/discovery/introduction/#identifying-the-device-provider-and-version","title":"Identifying the Device Provider and Version","text":"<p>Once a device\u2019s address is known, the next step is determining its provider (vendor) and NOS version. This can be achieved in two ways:</p> <ol> <li>No discovery: Enabled by supplying a <code>defaultSchema</code> (provider and version) in the <code>DiscoveryRule</code> CR definition.</li> <li>Dynamic Discovery: The provider and version are automatically determined using DiscoveryVendorProfile(s).</li> </ol> <p>IP Prefix Based Discovery requires Dynamic Discovery to be enabled</p>"},{"location":"user-guide/configuration/discovery/introduction/#the-discoveryvendorprofile-customresource","title":"The DiscoveryVendorProfile CustomResource","text":"<p>The Discovery Vendor Profile defines the provider specific information that uniquely identify the provider, version together with additional metadata (such as platformType, hostname, serial-number and mac Address)</p>"},{"location":"user-guide/configuration/discovery/introduction/#the-discoveryrule-customresource","title":"The DiscoveryRule CustomResource","text":"<p>The DiscoveryRule CustomResource is the cornerstone of the SDC discovery process. It not only initiates and manages the discovery of devices but also links these devices to their corresponding configurations and credentials. The key aspects of this CustomResource include:</p>"},{"location":"user-guide/configuration/discovery/introduction/#key-features","title":"Key Features","text":""},{"location":"user-guide/configuration/discovery/introduction/#device-and-profiles-association","title":"Device and Profiles association","text":"<p>Once a device is discovered, the DiscoveryRule links it with several essential components:</p> <ul> <li>Schema: Associates the device with its corresponding schema, enabling SDC to understand and manage the device's configuration correctly and validate changes made by users.</li> <li>Connection Profile: Connects the device to one or more pre-defined connection profile, which specifies how SDC should communicate with the device to modify and retrieve configuration.</li> <li>Sync Profile: Assigns a sync profile to the device, dictating how the device's configuration and state should be synchronized and managed.</li> <li>Credentials: Integrates with Kubernetes secrets to securely manage the credentials needed for accessing and configuring the device.</li> <li>Hostname: Either statically configured or retrieved from the device.</li> </ul>"},{"location":"user-guide/configuration/discovery/introduction/#creation-of-target-cr","title":"Creation of <code>Target</code> CR","text":"<p>For every device discovered, DiscoveryRule creates a <code>Target</code> CustomResource. This CR encapsulates details about the device, including its network address, associated schema, connection information, and synchronization settings.</p>"},{"location":"user-guide/configuration/discovery/introduction/#examples","title":"Examples","text":"<p>Example of a <code>DiscoveryRule</code></p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-static\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\ndefaultSchema:\nprovider: srl.nokia.sdcio.dev  version: 24.10.1\naddresses:\n- address: 172.18.0.4\nhostName: dev1\n- address: 172.18.0.3\nhostName: dev2\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-get\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\n</code></pre> <p>This documentation page highlights the versatility and sophistication of SDC's device discovery capabilities. By leveraging DiscoveryRule, users can efficiently integrate a wide range of devices into their network management workflows, paving the way for a more automated and streamlined network configuration process.</p>"},{"location":"user-guide/configuration/discovery/pod/","title":"Device discovery using k8s PODs","text":"<p>Pod discovery uses the provided <code>podSelector</code> section of the <code>DiscoveryRule</code> CustomResource to identify the target device(s). With pod discovery <code>sdc</code> allows to enable or disable full discovery (see Discovery Configuration Options). POD discovery checks if the <code>Pod</code> is ready and uses the first IP adddress in the POD status to identify the <code>target</code>.</p>"},{"location":"user-guide/configuration/discovery/pod/#attributes","title":"Attributes","text":"<ul> <li><code>podSelector</code>:<ul> <li><code>matchLabels</code>: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. (uses kubernetes logic)</li> <li><code>matchExpressions</code>: matchExpressions is a list of label selector requirements. The requirements are ANDed. (uses kubernetes logic)</li> </ul> </li> </ul>"},{"location":"user-guide/configuration/discovery/pod/#examples","title":"Examples","text":"<p>Example of a <code>DiscoveryRule</code></p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-dynamic\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\npodSelector:\nmatchLabels:\nsdcio.dev/nodeType: srl.nokia.sdcio.dev\ndiscoveryProfile:\ncredentials: srl.nokia.sdcio.dev connectionProfiles:\n- gnmi-skipverify\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev\nconnectionProfile: gnmi-skipverify\nsyncProfile: gnmi-get targetTemplate:\nlabels:\nsdcio.dev/region: us-east\n</code></pre>"},{"location":"user-guide/configuration/discovery/prefixes/","title":"Device discovery using IP prefixes","text":"<p>IP Prefix discovery uses the provided prefix in the <code>prefixes</code> section of the <code>DiscoveryRule</code> CustomResource to identify the target device. With prefix discovery <code>sdc</code> full discovery cannot be disabled (see Discovery Configuration Options).</p>"},{"location":"user-guide/configuration/discovery/prefixes/#attributes","title":"Attributes","text":"<ul> <li><code>prefixes</code>:<ul> <li><code>prefix</code>: The ip prefix used for discovery.</li> <li><code>excludes</code>: The IP addresses or prefixes to exclude during discovery</li> </ul> </li> </ul>"},{"location":"user-guide/configuration/discovery/prefixes/#examples","title":"Examples","text":"<p>Example of a <code>DiscoveryRule</code></p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-dynamic\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\nprefixes:\n- prefix: 172.18.0.0/24\nexcludes:\n- 172.18.0.0\n- 172.18.0.1\n- 172.18.0.255\ndiscoveryProfile:\ncredentials: srl.nokia.sdcio.dev connectionProfiles:\n- gnmi-skipverify\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-get\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\n</code></pre>"},{"location":"user-guide/configuration/discovery/service/","title":"Device discovery using k8s services","text":"<p>Service discovery uses the provided <code>serviceSelector</code> section of the <code>DiscoveryRule</code> CustomResource to identify the target device(s). With service discovery <code>sdc</code> allows to enable or disable full discovery (see Discovery Configuration Options). Service discovery uses the kubernetes <code>Service</code> to identify the target using the cluster domain name following the kubernetes logic.</p>"},{"location":"user-guide/configuration/discovery/service/#attributes","title":"Attributes","text":"<ul> <li><code>serviceSelector</code>:<ul> <li><code>matchLabels</code>: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. (uses kubernetes logic)</li> <li><code>matchExpressions</code>: matchExpressions is a list of label selector requirements. The requirements are ANDed. (uses kubernetes logic)</li> </ul> </li> <li><code>serviceDomain</code>: identifies the local service domain that is used in the cluster. Defaults to <code>cluster.local</code> but can be changed based on the cluster setup</li> </ul>"},{"location":"user-guide/configuration/discovery/service/#examples","title":"Examples","text":"<p>Example of a <code>DiscoveryRule</code></p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-dynamic\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\nserviceSelector:\nmatchLabels:\nsdcio.dev/nodeType: srl.nokia.sdcio.dev\ndiscoveryProfile:\ncredentials: srl.nokia.sdcio.dev connectionProfiles:\n- gnmi-skipverify\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-get\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\n</code></pre>"},{"location":"user-guide/configuration/subscription/prometheus/","title":"Subscription using Prometheus Operator","text":"<p>prerequisites: install prometheus operator</p>"},{"location":"user-guide/configuration/subscription/prometheus/#deploy-the-target-metric-monitor","title":"Deploy the target metric monitor","text":"<p>Configure the target metric that enables prometheus to scrape metrics from the config-server</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\n# Prometheus Monitor Service (Metrics)\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    app.kubernetes.io/name: config-server\n  name: target-metrics-monitor\n  namespace: network-system\nspec:\n  endpoints:\n    - interval: 30s\n      path: /metrics\n      port: targetmetrics # Ensure this is the name of the port that exposes HTTPS metrics\n      scheme: https\n      bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token\n      tlsConfig:\n        # TODO(user): The option insecureSkipVerify: true is not recommended for production since it disables\n        # certificate verification. This poses a significant security risk by making the system vulnerable to\n        # man-in-the-middle attacks, where an attacker could intercept and manipulate the communication between\n        # Prometheus and the monitored services. This could lead to unauthorized access to sensitive metrics data,\n        # compromising the integrity and confidentiality of the information.\n        # Please use the following options for secure configurations:\n        # caFile: /etc/metrics-certs/ca.crt\n        # certFile: /etc/metrics-certs/tls.crt\n        # keyFile: /etc/metrics-certs/tls.key\n        insecureSkipVerify: true\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: config-server\nEOF\n</code></pre> <p>To verify the scraping works, login to the prometheus web service. We expose the prometheus server using port forwarding.</p> <pre><code>kubectl --namespace monitoring port-forward svc/prometheus-operated 9090\n</code></pre> <p>Navigate to http://localhost:9090 to access the Prometheus interface:</p> <p>Click on Status, then Targets to see any configured scrape targets.</p> <p></p> <p>Navigate to Graph to test metrics collection:</p> <p></p> <p>In the Expression box, type <code>interface_statistics_in_packets</code>, and press ENTER.</p>"},{"location":"user-guide/configuration/subscription/prometheus/#troublesheeting","title":"Troublesheeting","text":"<p>In case of trouble here is a link to the troubleshooting-guide</p>"},{"location":"user-guide/configuration/subscription/subscription/","title":"Subscription","text":"<p>Subscription defines the subscription to collect metrics from the devices and export them using prometheus.</p> <p>Future:</p> <ul> <li>other export mechanims (Influx, Kafka, NATS, etc)</li> <li>abstractions/vendor agnostic subcriptions</li> <li>output transformers/event handlers</li> </ul>"},{"location":"user-guide/configuration/subscription/subscription/#attributes","title":"Attributes","text":"<ul> <li><code>target</code>: <ul> <li><code>targetSelector</code>: A label selector that selects which targets this subscription should apply to</li> </ul> </li> <li><code>protocol</code>: the protocol used to collect the data (gnmi, others TBD)</li> <li><code>port</code>: The default TCP port for gNMI sessions is <code>57400</code>.</li> <li><code>encoding</code>: Specifies the encoding format for gNMI (<code>ASCII</code>, <code>PROTO</code>).</li> <li><code>subscriptions</code>: Specifies the subscription details (list)<ul> <li><code>name</code>: name of the subscription</li> <li><code>description</code>: a description for the description</li> <li><code>adminState</code>: detrmines if the subscription is <code>enabled</code> or <code>disabled</code></li> <li><code>mode</code>: defines the subscription mode (<code>onChange</code>, <code>sample</code>)</li> <li><code>interval</code>: defines the interval for sampled subscriptions (<code>1s</code>, <code>15s</code>, <code>30s</code>, <code>60s</code>)</li> <li><code>paths</code>: define the subscription paths</li> </ul> </li> </ul>"},{"location":"user-guide/configuration/subscription/subscription/#example","title":"Example","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Subscription\nmetadata:\nname: subscription-1\nnamespace: default\nspec:\ntarget:\ntargetSelector:\nmatchLabels:\nsdcio.dev/region: us-east\nprotocol: gnmi\nport: 57400\nencoding: PROTO\nsubscriptions:\n- name: interface\ndescription: collect interface statistics\nadminState: enabled\nmode: sample\ninterval: 15s\npaths:\n- /interface[name=*]/statistics\n- /system/lldp/interface[name=*]/statistics\n</code></pre>"},{"location":"user-guide/configuration/subscription/subscription/#promtheus-usage","title":"Promtheus usage","text":"<p>prometheus usage</p>"},{"location":"user-guide/configuration/target/target/","title":"Target","text":"<p>The Target CR is what defines a system thats managed by SDC. The Target CRs are however not explicitly created by an enduser. The creation of Targets is the job of the DiscoveryRule Controller. It will take the defined DiscoveryRules perform discovery and create the target CRs with all the information configured or discovered by the Discovery Controller.</p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Target\nmetadata:\nname: dev-man\nnamespace: default\nspec:\naddress: 172.18.0.5\nconnectionProfile: gnmi-skipverify\ncredentials: srl.nokia.sdcio.dev\nprovider: srl.nokia.sdcio.dev\nsyncProfile: gnmi-get\n</code></pre>"},{"location":"user-guide/configuration/target/target/#attributes","title":"Attributes","text":"<ul> <li><code>address</code>: The mgmt address of the Target.</li> <li><code>connectionProfile</code>: The name of the connection profile (targetconnectionprofiles.inv.sdcio.dev) used to connect to the Target.</li> <li><code>syncProfile</code>: The name of the connection profile (targetsyncprofiles.inv.sdcio.dev) used to sync  config from the Target into SDC.</li> <li><code>credentials</code>: The name of the secret that contains the login creadentials for the Target.</li> <li><code>provider</code>: A string that defines the connection provider that is to be used. The format is \"<code>&lt;MODEL/NOS&gt;.&lt;VENDOR&gt;.sdcio.dev</code>\"</li> </ul>"},{"location":"user-guide/configuration/target-profiles/connection-profile/","title":"Connection Profile","text":"<p>SDC offers versatile connection capabilities with devices, supporting multiple protocols like NETCONF and gNMI. It is designed to accommodate a range of devices and security needs. The connection details are comprehensively outlined in the <code>TargetConnectionProfile</code> CustomResource. For further information, please refer to here.</p>"},{"location":"user-guide/configuration/target-profiles/connection-profile/#understanding-supported-protocols-in-sdc","title":"Understanding Supported Protocols in SDC","text":"<p>SDC seamlessly integrates two key protocols - NETCONF and gNMI - for device communication. Configuring connection profiles in SDC involves both general attributes and protocol-specific ones.</p>"},{"location":"user-guide/configuration/target-profiles/connection-profile/#general-connection-attributes","title":"General Connection Attributes","text":"<ul> <li><code>protocol</code>: Determines the connection protocol, with options being <code>netconf</code> or <code>gnmi</code>.</li> <li><code>connectRetry</code>: The interval between retries after a connection failure, defaulting to 10 seconds.</li> <li><code>timeout</code>: The duration for attempting initial connection establishment, set by default to 10 seconds.</li> </ul>"},{"location":"user-guide/configuration/target-profiles/connection-profile/#protocol-specific-attributes","title":"Protocol-Specific Attributes","text":""},{"location":"user-guide/configuration/target-profiles/connection-profile/#netconf-connection-attributes","title":"NETCONF Connection Attributes","text":"<p>For connections via NETCONF, the <code>protocol</code> needs to be set to <code>netconf</code>. Specific attributes include:</p> <ul> <li><code>port</code>: The designated SSH port for NETCONF sessions, usually <code>830</code>.</li> <li><code>includeNS</code>: When enabled, XML tags incorporate their namespace as an attribute.</li> <li><code>operationWithNS</code>: Activates proper namespacing for the <code>edit-config</code> RPC operation attribute in NETCONF.</li> <li><code>useOperationRemove</code>: If set to true, SDC utilizes the NETCONF operation <code>remove</code> rather than <code>delete</code>.</li> <li><code>preferredNetconfVersion</code>: Selects between NETCONF versions <code>1.0</code> or <code>1.1</code>.</li> <li><code>commitCandidate</code>: Selects the datastore on the target for applying the config to. Defaults to <code>candidate</code>, but can be set to <code>running</code> if the target does not support a <code>candidate</code> datastore.</li> </ul> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetConnectionProfile\nmetadata:\nname: netconf\nnamespace: default\nlabels:\ndummy: dummy\nspec:\nport: 830\nprotocol: netconf\nskipVerify: true\nincludeNS: true\noperationWithNS: true\n</code></pre>"},{"location":"user-guide/configuration/target-profiles/connection-profile/#gnmi-connection-attributes","title":"gNMI Connection Attributes","text":"<p>For gNMI protocol connections, set protocol to gnmi. Key attributes for gNMI are:</p> <ul> <li><code>port</code>: The default TCP port for gNMI sessions is <code>57400</code>.</li> <li><code>encoding</code>: Specifies the encoding format for gNMI (<code>JSON</code>, <code>JSON_IETF</code>, <code>PROTO</code>).</li> <li><code>skipVerify</code>: If enabled, SDC secures the connection without validating device certificates.</li> <li><code>insecure</code>: Establishes an insecure gNMI connection when set to true.</li> </ul> <p>Example gNMI Configuration with Skip-Verify:</p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetConnectionProfile\nmetadata:\nname: gnmi-skipverify\nnamespace: default\nspec:\nport: 57400\nprotocol: gnmi\nencoding: JSON_IETF\nskipVerify: true\ninsecure: false\n</code></pre>"},{"location":"user-guide/configuration/target-profiles/sync-profile/","title":"Sync Profile","text":"<p>The Sync Profile is an integral component of SDC, enabling the accurate configuration of devices and validation of configuration payloads.  SDC achieves this by synchronizing the device's running store and state store into an internal cache. The synchronization process, including the protocol and strategy used, is customizable through the <code>TargetSyncProfile</code> CustomResource, detailed here.</p>"},{"location":"user-guide/configuration/target-profiles/sync-profile/#synchronization-protocols","title":"Synchronization protocols","text":"<p>SDC supports the synchronization of a device's configuration and state using two protocols: gNMI and NETCONF. The <code>TargetSyncProfile</code> encompasses both protocol-specific and general fields.</p>"},{"location":"user-guide/configuration/target-profiles/sync-profile/#general-sync-attributes","title":"General sync Attributes","text":"<p>These attributes are common across synchronization protocols:</p> <ul> <li><code>validate</code>: If set to true, SDC validates the received updates against the device's schema.</li> <li><code>workers</code>: Determines the number of cache workers, optimizing write performance to the cache.</li> <li><code>buffer</code>: Specifies the buffer size for queuing sync updates before writing to the cache.</li> <li><code>sync</code>: A list of synchronization strategies, each defining a protocol and its specific attributes. Multiple strategies can be employed concurrently.</li> </ul>"},{"location":"user-guide/configuration/target-profiles/sync-profile/#netconf-sync-strategy","title":"NETCONF Sync strategy","text":"<p>For NETCONF synchronization, the netconf strategy is used with protocol: netconf. SDC periodically retrieves the current running configuration of the device using the NETCONF get-config RPC. This can be adjusted with the following attributes:</p> <ul> <li><code>paths</code>: A list of paths included as <code>filter</code> in the <code>get-config</code> RPC.</li> <li><code>interval</code>: The frequency at which <code>get-config</code> is executed.</li> </ul> <p>Example NETCONF Sync Profile:</p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: netconf-getconfig\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: netconf\nport: 830\npaths:\n- /\nmode: get\ninterval: 30s\n</code></pre>"},{"location":"user-guide/configuration/target-profiles/sync-profile/#gnmi-sync-strategy","title":"gNMI Sync strategy","text":"<p>For gNMI synchronization, set the protocol to <code>protocol: gnmi</code>:</p> <p>SDC supports various gNMI subscription modes:</p> <ul> <li><code>get</code>: Periodic get Config, interval needs to be specified.</li> <li><code>onChange</code>: Corresponds to gNMI stream mode ON_CHANGE.</li> <li><code>sample</code>: Matches gNMI stream mode SAMPLE, using interval as the sample-interval.</li> <li><code>once</code>: Equivalent to gNMI mode ONCE, where a SubscribeRequest is sent at each interval.</li> </ul> <p>Other gNMI specific attributes:</p> <ul> <li><code>protocol</code>: the protocol used for syncing: options being <code>netconf</code> or <code>gnmi</code></li> <li><code>encoding</code>: The gNMI encoding used for subscriptions. (only relevant for gNMI with options (<code>JSON</code>, <code>JSON_IETF</code>, <code>PROTO</code>))</li> <li><code>port</code>: The port used to access the target for syncing</li> </ul> <p>Example of an <code>get</code> gNMI SyncProfile:</p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: gnmi-get\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: gnmi\npaths:\n- /\nmode: get\nencoding: JSON_IETF\ninterval: 30s\n</code></pre> <p>Example of a gNMI <code>TargetSyncProfile</code> with both <code>once</code> and <code>onChange</code> modes:</p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: gnmi-onchange-and-once\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: gnmi\npaths:\n- /\nmode: onChange\nencoding: PROTO\n- name: all_once\nprotocol: gnmi\npaths:\n- /\nmode: once\nencoding: JSON_IETF\ninterval: 30s\n</code></pre>"}]}